{"ast":null,"code":"import { trainingLogsAPI } from \"../services/api\";\nexport default class TrainingLogManager {\n  constructor() {\n    // No longer need Firebase auth reference\n  }\n  async loadTable(id) {\n    try {\n      const data = await trainingLogsAPI.getById(id);\n      return data.data; // Return the log data structure\n    } catch (error) {\n      console.error(\"Error loading table:\", error);\n      return null;\n    }\n  }\n  async saveTable(log) {\n    try {\n      const logData = {\n        name: log.tableName || \"New Log\",\n        date: log.date || new Date().toISOString().split(\"T\")[0],\n        data: log\n      };\n      await trainingLogsAPI.create(logData);\n      return {\n        message: \"Saved\"\n      };\n    } catch (error) {\n      console.error(\"Error saving table:\", error);\n      throw new Error(\"Save failed\");\n    }\n  }\n  async deleteTable(id) {\n    try {\n      await trainingLogsAPI.delete(id);\n      return true;\n    } catch (error) {\n      console.error(\"Error deleting table:\", error);\n      throw new Error(\"Delete failed\");\n    }\n  }\n  async listTables() {\n    try {\n      const tables = await trainingLogsAPI.getAll();\n      return tables.map(table => ({\n        id: table.id,\n        tableName: table.data.tableName || table.name,\n        date: table.data.date || table.date,\n        lastOpened: table.data.lastOpened || new Date().toISOString()\n      }));\n    } catch (error) {\n      console.error(\"Error listing tables:\", error);\n      return [];\n    }\n  }\n\n  // Get all unique muscle groups from user's logs\n  async getUniqueMuscleGroups() {\n    try {\n      const tables = await trainingLogsAPI.getAll();\n      const muscleGroups = new Set();\n      tables.forEach(table => {\n        const data = table.data;\n        if (data.rows) {\n          data.rows.forEach(row => {\n            if (row.muscleGroup && row.muscleGroup.trim()) {\n              muscleGroups.add(row.muscleGroup.trim());\n            }\n          });\n        }\n      });\n      return Array.from(muscleGroups).sort();\n    } catch (error) {\n      console.error(\"Error fetching muscle groups:\", error);\n      return [];\n    }\n  }\n\n  // Get all unique exercises from user's logs\n  async getUniqueExercises() {\n    try {\n      const tables = await trainingLogsAPI.getAll();\n      const exercises = new Set();\n      tables.forEach(table => {\n        const data = table.data;\n        if (data.rows) {\n          data.rows.forEach(row => {\n            if (row.exercise && row.exercise.trim()) {\n              exercises.add(row.exercise.trim());\n            }\n          });\n        }\n      });\n      return Array.from(exercises).sort();\n    } catch (error) {\n      console.error(\"Error fetching exercises:\", error);\n      return [];\n    }\n  }\n\n  // Get exercises for a specific muscle group\n  async getExercisesForMuscleGroup(muscleGroup) {\n    try {\n      const tables = await trainingLogsAPI.getAll();\n      const exercises = new Set();\n      tables.forEach(table => {\n        const data = table.data;\n        if (data.rows) {\n          data.rows.forEach(row => {\n            if (row.muscleGroup === muscleGroup && row.exercise && row.exercise.trim()) {\n              exercises.add(row.exercise.trim());\n            }\n          });\n        }\n      });\n      return Array.from(exercises).sort();\n    } catch (error) {\n      console.error(\"Error fetching exercises for muscle group:\", error);\n      return [];\n    }\n  }\n  createNewTable() {\n    const id = crypto.randomUUID();\n    const today = new Date().toISOString().split(\"T\")[0];\n    return {\n      id,\n      tableName: \"New Log\",\n      date: today,\n      rows: [{\n        id: 0,\n        muscleGroup: \"\",\n        exercise: \"\",\n        sets: [{\n          reps: \"\",\n          weight: \"\"\n        }],\n        notes: \"\",\n        showNotes: false,\n        weightUnit: \"lbs\"\n      }]\n    };\n  }\n}","map":{"version":3,"names":["trainingLogsAPI","TrainingLogManager","constructor","loadTable","id","data","getById","error","console","saveTable","log","logData","name","tableName","date","Date","toISOString","split","create","message","Error","deleteTable","delete","listTables","tables","getAll","map","table","lastOpened","getUniqueMuscleGroups","muscleGroups","Set","forEach","rows","row","muscleGroup","trim","add","Array","from","sort","getUniqueExercises","exercises","exercise","getExercisesForMuscleGroup","createNewTable","crypto","randomUUID","today","sets","reps","weight","notes","showNotes","weightUnit"],"sources":["C:/Users/kidus/OneDrive/Documentos/Summer2025/fitness-tracker-frontend/Frontend/src/components/TrainingLogManager.jsx"],"sourcesContent":["import { trainingLogsAPI } from \"../services/api\";\r\n\r\nexport default class TrainingLogManager {\r\n  constructor() {\r\n    // No longer need Firebase auth reference\r\n  }\r\n\r\n  async loadTable(id) {\r\n    try {\r\n      const data = await trainingLogsAPI.getById(id);\r\n      return data.data; // Return the log data structure\r\n    } catch (error) {\r\n      console.error(\"Error loading table:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async saveTable(log) {\r\n    try {\r\n      const logData = {\r\n        name: log.tableName || \"New Log\",\r\n        date: log.date || new Date().toISOString().split(\"T\")[0],\r\n        data: log\r\n      };\r\n      \r\n      await trainingLogsAPI.create(logData);\r\n      return { message: \"Saved\" };\r\n    } catch (error) {\r\n      console.error(\"Error saving table:\", error);\r\n      throw new Error(\"Save failed\");\r\n    }\r\n  }\r\n\r\n  async deleteTable(id) {\r\n    try {\r\n      await trainingLogsAPI.delete(id);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error deleting table:\", error);\r\n      throw new Error(\"Delete failed\");\r\n    }\r\n  }\r\n\r\n  async listTables() {\r\n    try {\r\n      const tables = await trainingLogsAPI.getAll();\r\n      return tables.map(table => ({\r\n        id: table.id,\r\n        tableName: table.data.tableName || table.name,\r\n        date: table.data.date || table.date,\r\n        lastOpened: table.data.lastOpened || new Date().toISOString()\r\n      }));\r\n    } catch (error) {\r\n      console.error(\"Error listing tables:\", error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get all unique muscle groups from user's logs\r\n  async getUniqueMuscleGroups() {\r\n    try {\r\n      const tables = await trainingLogsAPI.getAll();\r\n      \r\n      const muscleGroups = new Set();\r\n      tables.forEach(table => {\r\n        const data = table.data;\r\n        if (data.rows) {\r\n          data.rows.forEach(row => {\r\n            if (row.muscleGroup && row.muscleGroup.trim()) {\r\n              muscleGroups.add(row.muscleGroup.trim());\r\n            }\r\n          });\r\n        }\r\n      });\r\n      \r\n      return Array.from(muscleGroups).sort();\r\n    } catch (error) {\r\n      console.error(\"Error fetching muscle groups:\", error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get all unique exercises from user's logs\r\n  async getUniqueExercises() {\r\n    try {\r\n      const tables = await trainingLogsAPI.getAll();\r\n      \r\n      const exercises = new Set();\r\n      tables.forEach(table => {\r\n        const data = table.data;\r\n        if (data.rows) {\r\n          data.rows.forEach(row => {\r\n            if (row.exercise && row.exercise.trim()) {\r\n              exercises.add(row.exercise.trim());\r\n            }\r\n          });\r\n        }\r\n      });\r\n      \r\n      return Array.from(exercises).sort();\r\n    } catch (error) {\r\n      console.error(\"Error fetching exercises:\", error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get exercises for a specific muscle group\r\n  async getExercisesForMuscleGroup(muscleGroup) {\r\n    try {\r\n      const tables = await trainingLogsAPI.getAll();\r\n      \r\n      const exercises = new Set();\r\n      tables.forEach(table => {\r\n        const data = table.data;\r\n        if (data.rows) {\r\n          data.rows.forEach(row => {\r\n            if (row.muscleGroup === muscleGroup && row.exercise && row.exercise.trim()) {\r\n              exercises.add(row.exercise.trim());\r\n            }\r\n          });\r\n        }\r\n      });\r\n      \r\n      return Array.from(exercises).sort();\r\n    } catch (error) {\r\n      console.error(\"Error fetching exercises for muscle group:\", error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  createNewTable() {\r\n    const id = crypto.randomUUID();\r\n    const today = new Date().toISOString().split(\"T\")[0];\r\n    return {\r\n      id,\r\n      tableName: \"New Log\",\r\n      date: today,\r\n      rows: [\r\n        {\r\n          id: 0,\r\n          muscleGroup: \"\",\r\n          exercise: \"\",\r\n          sets: [{ reps: \"\", weight: \"\" }],\r\n          notes: \"\",\r\n          showNotes: false,\r\n          weightUnit: \"lbs\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}"],"mappings":"AAAA,SAASA,eAAe,QAAQ,iBAAiB;AAEjD,eAAe,MAAMC,kBAAkB,CAAC;EACtCC,WAAWA,CAAA,EAAG;IACZ;EAAA;EAGF,MAAMC,SAASA,CAACC,EAAE,EAAE;IAClB,IAAI;MACF,MAAMC,IAAI,GAAG,MAAML,eAAe,CAACM,OAAO,CAACF,EAAE,CAAC;MAC9C,OAAOC,IAAI,CAACA,IAAI,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,IAAI;IACb;EACF;EAEA,MAAME,SAASA,CAACC,GAAG,EAAE;IACnB,IAAI;MACF,MAAMC,OAAO,GAAG;QACdC,IAAI,EAAEF,GAAG,CAACG,SAAS,IAAI,SAAS;QAChCC,IAAI,EAAEJ,GAAG,CAACI,IAAI,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACxDZ,IAAI,EAAEK;MACR,CAAC;MAED,MAAMV,eAAe,CAACkB,MAAM,CAACP,OAAO,CAAC;MACrC,OAAO;QAAEQ,OAAO,EAAE;MAAQ,CAAC;IAC7B,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAM,IAAIa,KAAK,CAAC,aAAa,CAAC;IAChC;EACF;EAEA,MAAMC,WAAWA,CAACjB,EAAE,EAAE;IACpB,IAAI;MACF,MAAMJ,eAAe,CAACsB,MAAM,CAAClB,EAAE,CAAC;MAChC,OAAO,IAAI;IACb,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAM,IAAIa,KAAK,CAAC,eAAe,CAAC;IAClC;EACF;EAEA,MAAMG,UAAUA,CAAA,EAAG;IACjB,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMxB,eAAe,CAACyB,MAAM,CAAC,CAAC;MAC7C,OAAOD,MAAM,CAACE,GAAG,CAACC,KAAK,KAAK;QAC1BvB,EAAE,EAAEuB,KAAK,CAACvB,EAAE;QACZS,SAAS,EAAEc,KAAK,CAACtB,IAAI,CAACQ,SAAS,IAAIc,KAAK,CAACf,IAAI;QAC7CE,IAAI,EAAEa,KAAK,CAACtB,IAAI,CAACS,IAAI,IAAIa,KAAK,CAACb,IAAI;QACnCc,UAAU,EAAED,KAAK,CAACtB,IAAI,CAACuB,UAAU,IAAI,IAAIb,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MAC9D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,EAAE;IACX;EACF;;EAEA;EACA,MAAMsB,qBAAqBA,CAAA,EAAG;IAC5B,IAAI;MACF,MAAML,MAAM,GAAG,MAAMxB,eAAe,CAACyB,MAAM,CAAC,CAAC;MAE7C,MAAMK,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;MAC9BP,MAAM,CAACQ,OAAO,CAACL,KAAK,IAAI;QACtB,MAAMtB,IAAI,GAAGsB,KAAK,CAACtB,IAAI;QACvB,IAAIA,IAAI,CAAC4B,IAAI,EAAE;UACb5B,IAAI,CAAC4B,IAAI,CAACD,OAAO,CAACE,GAAG,IAAI;YACvB,IAAIA,GAAG,CAACC,WAAW,IAAID,GAAG,CAACC,WAAW,CAACC,IAAI,CAAC,CAAC,EAAE;cAC7CN,YAAY,CAACO,GAAG,CAACH,GAAG,CAACC,WAAW,CAACC,IAAI,CAAC,CAAC,CAAC;YAC1C;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;MAEF,OAAOE,KAAK,CAACC,IAAI,CAACT,YAAY,CAAC,CAACU,IAAI,CAAC,CAAC;IACxC,CAAC,CAAC,OAAOjC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAO,EAAE;IACX;EACF;;EAEA;EACA,MAAMkC,kBAAkBA,CAAA,EAAG;IACzB,IAAI;MACF,MAAMjB,MAAM,GAAG,MAAMxB,eAAe,CAACyB,MAAM,CAAC,CAAC;MAE7C,MAAMiB,SAAS,GAAG,IAAIX,GAAG,CAAC,CAAC;MAC3BP,MAAM,CAACQ,OAAO,CAACL,KAAK,IAAI;QACtB,MAAMtB,IAAI,GAAGsB,KAAK,CAACtB,IAAI;QACvB,IAAIA,IAAI,CAAC4B,IAAI,EAAE;UACb5B,IAAI,CAAC4B,IAAI,CAACD,OAAO,CAACE,GAAG,IAAI;YACvB,IAAIA,GAAG,CAACS,QAAQ,IAAIT,GAAG,CAACS,QAAQ,CAACP,IAAI,CAAC,CAAC,EAAE;cACvCM,SAAS,CAACL,GAAG,CAACH,GAAG,CAACS,QAAQ,CAACP,IAAI,CAAC,CAAC,CAAC;YACpC;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;MAEF,OAAOE,KAAK,CAACC,IAAI,CAACG,SAAS,CAAC,CAACF,IAAI,CAAC,CAAC;IACrC,CAAC,CAAC,OAAOjC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,EAAE;IACX;EACF;;EAEA;EACA,MAAMqC,0BAA0BA,CAACT,WAAW,EAAE;IAC5C,IAAI;MACF,MAAMX,MAAM,GAAG,MAAMxB,eAAe,CAACyB,MAAM,CAAC,CAAC;MAE7C,MAAMiB,SAAS,GAAG,IAAIX,GAAG,CAAC,CAAC;MAC3BP,MAAM,CAACQ,OAAO,CAACL,KAAK,IAAI;QACtB,MAAMtB,IAAI,GAAGsB,KAAK,CAACtB,IAAI;QACvB,IAAIA,IAAI,CAAC4B,IAAI,EAAE;UACb5B,IAAI,CAAC4B,IAAI,CAACD,OAAO,CAACE,GAAG,IAAI;YACvB,IAAIA,GAAG,CAACC,WAAW,KAAKA,WAAW,IAAID,GAAG,CAACS,QAAQ,IAAIT,GAAG,CAACS,QAAQ,CAACP,IAAI,CAAC,CAAC,EAAE;cAC1EM,SAAS,CAACL,GAAG,CAACH,GAAG,CAACS,QAAQ,CAACP,IAAI,CAAC,CAAC,CAAC;YACpC;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;MAEF,OAAOE,KAAK,CAACC,IAAI,CAACG,SAAS,CAAC,CAACF,IAAI,CAAC,CAAC;IACrC,CAAC,CAAC,OAAOjC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MAClE,OAAO,EAAE;IACX;EACF;EAEAsC,cAAcA,CAAA,EAAG;IACf,MAAMzC,EAAE,GAAG0C,MAAM,CAACC,UAAU,CAAC,CAAC;IAC9B,MAAMC,KAAK,GAAG,IAAIjC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpD,OAAO;MACLb,EAAE;MACFS,SAAS,EAAE,SAAS;MACpBC,IAAI,EAAEkC,KAAK;MACXf,IAAI,EAAE,CACJ;QACE7B,EAAE,EAAE,CAAC;QACL+B,WAAW,EAAE,EAAE;QACfQ,QAAQ,EAAE,EAAE;QACZM,IAAI,EAAE,CAAC;UAAEC,IAAI,EAAE,EAAE;UAAEC,MAAM,EAAE;QAAG,CAAC,CAAC;QAChCC,KAAK,EAAE,EAAE;QACTC,SAAS,EAAE,KAAK;QAChBC,UAAU,EAAE;MACd,CAAC;IAEL,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}