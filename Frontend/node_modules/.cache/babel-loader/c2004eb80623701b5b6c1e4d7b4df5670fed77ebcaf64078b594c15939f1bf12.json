{"ast":null,"code":"import { getTables, getTable, createTable, updateTable, deleteTable } from '../services/api';\nexport default class TrainingLogManager {\n  // List all tables\n  async listTables() {\n    return await getTables();\n  }\n\n  // Load a single table by ID\n  async loadTable(id) {\n    return await getTable(id);\n  }\n\n  // Save (create or update) a table\n  async saveTable(log) {\n    if (!log.id) {\n      // Create new\n      return await createTable(log);\n    } else {\n      // Update existing\n      return await updateTable(log.id, log);\n    }\n  }\n\n  // Delete a table by ID\n  async deleteTable(id) {\n    return await deleteTable(id);\n  }\n\n  // Get all unique muscle groups from all logs\n  async getUniqueMuscleGroups() {\n    const tables = await getTables();\n    const muscleGroups = new Set();\n    tables.forEach(data => {\n      if (data.rows) {\n        data.rows.forEach(row => {\n          if (row.muscleGroup && row.muscleGroup.trim()) {\n            muscleGroups.add(row.muscleGroup.trim());\n          }\n        });\n      }\n    });\n    return Array.from(muscleGroups).sort();\n  }\n\n  // Get all unique exercises from all logs\n  async getUniqueExercises() {\n    const tables = await getTables();\n    const exercises = new Set();\n    tables.forEach(data => {\n      if (data.rows) {\n        data.rows.forEach(row => {\n          if (row.exercise && row.exercise.trim()) {\n            exercises.add(row.exercise.trim());\n          }\n        });\n      }\n    });\n    return Array.from(exercises).sort();\n  }\n\n  // Get exercises for a specific muscle group\n  async getExercisesForMuscleGroup(muscleGroup) {\n    const tables = await getTables();\n    const exercises = new Set();\n    tables.forEach(data => {\n      if (data.rows) {\n        data.rows.forEach(row => {\n          if (row.muscleGroup === muscleGroup && row.exercise && row.exercise.trim()) {\n            exercises.add(row.exercise.trim());\n          }\n        });\n      }\n    });\n    return Array.from(exercises).sort();\n  }\n\n  // Create a new table object (not saved yet)\n  createNewTable() {\n    const id = crypto.randomUUID();\n    const today = new Date().toISOString().split('T')[0];\n    return {\n      id,\n      tableName: 'New Log',\n      date: today,\n      rows: [{\n        id: 0,\n        muscleGroup: '',\n        exercise: '',\n        sets: [{\n          reps: '',\n          weight: ''\n        }],\n        notes: '',\n        showNotes: false,\n        weightUnit: 'lbs'\n      }]\n    };\n  }\n}","map":{"version":3,"names":["getTables","getTable","createTable","updateTable","deleteTable","TrainingLogManager","listTables","loadTable","id","saveTable","log","getUniqueMuscleGroups","tables","muscleGroups","Set","forEach","data","rows","row","muscleGroup","trim","add","Array","from","sort","getUniqueExercises","exercises","exercise","getExercisesForMuscleGroup","createNewTable","crypto","randomUUID","today","Date","toISOString","split","tableName","date","sets","reps","weight","notes","showNotes","weightUnit"],"sources":["C:/Users/kidus/OneDrive/Documentos/Summer2025/fitness-tracker-frontend/src/components/TrainingLogManager.jsx"],"sourcesContent":["import { getTables, getTable, createTable, updateTable, deleteTable } from '../services/api';\r\n\r\nexport default class TrainingLogManager {\r\n  // List all tables\r\n  async listTables() {\r\n    return await getTables();\r\n  }\r\n\r\n  // Load a single table by ID\r\n  async loadTable(id) {\r\n    return await getTable(id);\r\n  }\r\n\r\n  // Save (create or update) a table\r\n  async saveTable(log) {\r\n    if (!log.id) {\r\n      // Create new\r\n      return await createTable(log);\r\n    } else {\r\n      // Update existing\r\n      return await updateTable(log.id, log);\r\n    }\r\n  }\r\n\r\n  // Delete a table by ID\r\n  async deleteTable(id) {\r\n    return await deleteTable(id);\r\n  }\r\n\r\n  // Get all unique muscle groups from all logs\r\n  async getUniqueMuscleGroups() {\r\n    const tables = await getTables();\r\n    const muscleGroups = new Set();\r\n    tables.forEach(data => {\r\n      if (data.rows) {\r\n        data.rows.forEach(row => {\r\n          if (row.muscleGroup && row.muscleGroup.trim()) {\r\n            muscleGroups.add(row.muscleGroup.trim());\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return Array.from(muscleGroups).sort();\r\n  }\r\n\r\n  // Get all unique exercises from all logs\r\n  async getUniqueExercises() {\r\n    const tables = await getTables();\r\n    const exercises = new Set();\r\n    tables.forEach(data => {\r\n      if (data.rows) {\r\n        data.rows.forEach(row => {\r\n          if (row.exercise && row.exercise.trim()) {\r\n            exercises.add(row.exercise.trim());\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return Array.from(exercises).sort();\r\n  }\r\n\r\n  // Get exercises for a specific muscle group\r\n  async getExercisesForMuscleGroup(muscleGroup) {\r\n    const tables = await getTables();\r\n    const exercises = new Set();\r\n    tables.forEach(data => {\r\n      if (data.rows) {\r\n        data.rows.forEach(row => {\r\n          if (row.muscleGroup === muscleGroup && row.exercise && row.exercise.trim()) {\r\n            exercises.add(row.exercise.trim());\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return Array.from(exercises).sort();\r\n  }\r\n\r\n  // Create a new table object (not saved yet)\r\n  createNewTable() {\r\n    const id = crypto.randomUUID();\r\n    const today = new Date().toISOString().split('T')[0];\r\n    return {\r\n      id,\r\n      tableName: 'New Log',\r\n      date: today,\r\n      rows: [\r\n        {\r\n          id: 0,\r\n          muscleGroup: '',\r\n          exercise: '',\r\n          sets: [{ reps: '', weight: '' }],\r\n          notes: '',\r\n          showNotes: false,\r\n          weightUnit: 'lbs',\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}