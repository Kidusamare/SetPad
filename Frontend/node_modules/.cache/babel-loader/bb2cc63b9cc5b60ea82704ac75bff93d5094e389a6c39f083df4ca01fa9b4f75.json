{"ast":null,"code":"import _objectSpread from\"C:/Users/kidus/OneDrive/Documentos/Summer2025/fitness-tracker-frontend/Frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";class AICache{constructor(){this.cache=new Map();this.lastRequestTimes=new Map();this.MIN_REQUEST_INTERVAL=30000;// 30 seconds minimum between requests\nthis.CACHE_DURATION=5*24*60*60*1000;// 5 days in milliseconds\n}// Generate cache key based on parameters\ngenerateCacheKey(endpoint){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const sortedParams=Object.keys(params).sort().reduce((result,key)=>{result[key]=params[key];return result;},{});return\"\".concat(endpoint,\":\").concat(JSON.stringify(sortedParams));}// Check if we should allow a new request (rate limiting)\ncanMakeRequest(cacheKey){const now=Date.now();const lastRequestTime=this.lastRequestTimes.get(cacheKey);if(!lastRequestTime){return true;}return now-lastRequestTime>=this.MIN_REQUEST_INTERVAL;}// Get cached data if it exists and hasn't expired\ngetCachedData(cacheKey){const cachedItem=this.cache.get(cacheKey);if(!cachedItem){return null;}const now=Date.now();const isExpired=now-cachedItem.timestamp>this.CACHE_DURATION;if(isExpired){this.cache.delete(cacheKey);this.lastRequestTimes.delete(cacheKey);return null;}return cachedItem.data;}// Cache data with timestamp\nsetCachedData(cacheKey,data){this.cache.set(cacheKey,{data,timestamp:Date.now()});this.lastRequestTimes.set(cacheKey,Date.now());}// Clear all expired cache entries\nclearExpiredCache(){const now=Date.now();for(const[key,item]of this.cache.entries()){if(now-item.timestamp>this.CACHE_DURATION){this.cache.delete(key);this.lastRequestTimes.delete(key);}}}// Force refresh cache for a specific key\nforceRefreshCache(cacheKey){this.cache.delete(cacheKey);this.lastRequestTimes.delete(cacheKey);}// Get cache info for debugging\ngetCacheInfo(){return{cacheSize:this.cache.size,entries:Array.from(this.cache.keys()),lastRequestTimes:Object.fromEntries(this.lastRequestTimes)};}// Check if cache entry is fresh (less than 1 day old)\nisCacheFresh(cacheKey){const cachedItem=this.cache.get(cacheKey);if(!cachedItem)return false;const now=Date.now();const oneDayInMs=24*60*60*1000;return now-cachedItem.timestamp<oneDayInMs;}// Get time until cache expires\ngetTimeUntilExpiry(cacheKey){const cachedItem=this.cache.get(cacheKey);if(!cachedItem)return 0;const now=Date.now();const expiryTime=cachedItem.timestamp+this.CACHE_DURATION;return Math.max(0,expiryTime-now);}}// Create singleton instance\nconst aiCache=new AICache();// AI API service with caching and rate limiting\nexport class AIService{static async fetchWithCache(endpoint){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const cacheKey=aiCache.generateCacheKey(endpoint,params);// Check if we have fresh cached data\nconst cachedData=aiCache.getCachedData(cacheKey);if(cachedData&&!options.forceRefresh){console.log(\"[AI Cache] Using cached data for \".concat(endpoint));return{data:cachedData,fromCache:true,cacheAge:Date.now()-aiCache.cache.get(cacheKey).timestamp};}// Check rate limiting\nif(!aiCache.canMakeRequest(cacheKey)&&!options.forceRefresh){const lastRequestTime=aiCache.lastRequestTimes.get(cacheKey);const timeUntilNext=aiCache.MIN_REQUEST_INTERVAL-(Date.now()-lastRequestTime);throw new Error(\"Rate limited. Please wait \".concat(Math.ceil(timeUntilNext/1000),\" seconds before making another request.\"));}try{// Helper function to get auth headers\nconst getAuthHeaders=()=>{const token=localStorage.getItem('token');return _objectSpread(_objectSpread({'Content-Type':'application/json'},token&&{'Authorization':\"Bearer \".concat(token)}),options.headers);};// Make API request\nconst url=\"\".concat(process.env.REACT_APP_API_URL||'http://localhost:8000').concat(endpoint);const response=await fetch(url,_objectSpread({method:options.method||'GET',headers:getAuthHeaders(),body:params&&Object.keys(params).length>0?JSON.stringify(params):undefined},options));if(!response.ok){throw new Error(\"API request failed: \".concat(response.status,\" \").concat(response.statusText));}const data=await response.json();// Cache the response\naiCache.setCachedData(cacheKey,data);console.log(\"[AI Cache] Cached new data for \".concat(endpoint));return{data,fromCache:false,cached:true};}catch(error){console.error(\"[AI Service] Error fetching \".concat(endpoint,\":\"),error);throw error;}}// Insights API with caching\nstatic async getInsights(){let forceRefresh=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;return this.fetchWithCache('/ai-coaching/workout-analysis',{},{forceRefresh,method:'GET'});}// AI Coaching chat with rate limiting\nstatic async sendChatMessage(request){let forceRefresh=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;// Ensure request matches backend AICoachingRequest schema\nconst requestBody={message:request.message||request,conversation_history:request.conversation_history||[],user_data:request.user_data||null};return this.fetchWithCache('/ai-coaching',requestBody,{forceRefresh,method:'POST'});}// Exercise suggestions with caching\nstatic async getExerciseSuggestions(muscleGroup,currentExercise){let forceRefresh=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;return this.fetchWithCache('/ai-coaching/exercise-suggestions',{muscle_group:muscleGroup,current_exercise:currentExercise},{forceRefresh,method:'POST'});}// Get cache status\nstatic getCacheStatus(){return aiCache.getCacheInfo();}// Clear specific cache\nstatic clearCache(endpoint){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const cacheKey=aiCache.generateCacheKey(endpoint,params);aiCache.forceRefreshCache(cacheKey);}// Clear all cache\nstatic clearAllCache(){aiCache.cache.clear();aiCache.lastRequestTimes.clear();}// Clean expired cache entries\nstatic cleanExpiredCache(){aiCache.clearExpiredCache();}}// Automatically clean expired cache every hour\nsetInterval(()=>{AIService.cleanExpiredCache();console.log('[AI Cache] Cleaned expired cache entries');},60*60*1000);// 1 hour\nexport default AIService;","map":{"version":3,"names":["AICache","constructor","cache","Map","lastRequestTimes","MIN_REQUEST_INTERVAL","CACHE_DURATION","generateCacheKey","endpoint","params","arguments","length","undefined","sortedParams","Object","keys","sort","reduce","result","key","concat","JSON","stringify","canMakeRequest","cacheKey","now","Date","lastRequestTime","get","getCachedData","cachedItem","isExpired","timestamp","delete","data","setCachedData","set","clearExpiredCache","item","entries","forceRefreshCache","getCacheInfo","cacheSize","size","Array","from","fromEntries","isCacheFresh","oneDayInMs","getTimeUntilExpiry","expiryTime","Math","max","aiCache","AIService","fetchWithCache","options","cachedData","forceRefresh","console","log","fromCache","cacheAge","timeUntilNext","Error","ceil","getAuthHeaders","token","localStorage","getItem","_objectSpread","headers","url","process","env","REACT_APP_API_URL","response","fetch","method","body","ok","status","statusText","json","cached","error","getInsights","sendChatMessage","request","requestBody","message","conversation_history","user_data","getExerciseSuggestions","muscleGroup","currentExercise","muscle_group","current_exercise","getCacheStatus","clearCache","clearAllCache","clear","cleanExpiredCache","setInterval"],"sources":["C:/Users/kidus/OneDrive/Documentos/Summer2025/fitness-tracker-frontend/Frontend/src/services/aiCacheService.js"],"sourcesContent":["class AICache {\r\n    constructor() {\r\n        this.cache = new Map();\r\n        this.lastRequestTimes = new Map();\r\n        this.MIN_REQUEST_INTERVAL = 30000; // 30 seconds minimum between requests\r\n        this.CACHE_DURATION = 5 * 24 * 60 * 60 * 1000; // 5 days in milliseconds\r\n    }\r\n\r\n    // Generate cache key based on parameters\r\n    generateCacheKey(endpoint, params = {}) {\r\n        const sortedParams = Object.keys(params).sort().reduce((result, key) => {\r\n            result[key] = params[key];\r\n            return result;\r\n        }, {});\r\n        return `${endpoint}:${JSON.stringify(sortedParams)}`;\r\n    }\r\n\r\n    // Check if we should allow a new request (rate limiting)\r\n    canMakeRequest(cacheKey) {\r\n        const now = Date.now();\r\n        const lastRequestTime = this.lastRequestTimes.get(cacheKey);\r\n        \r\n        if (!lastRequestTime) {\r\n            return true;\r\n        }\r\n        \r\n        return (now - lastRequestTime) >= this.MIN_REQUEST_INTERVAL;\r\n    }\r\n\r\n    // Get cached data if it exists and hasn't expired\r\n    getCachedData(cacheKey) {\r\n        const cachedItem = this.cache.get(cacheKey);\r\n        \r\n        if (!cachedItem) {\r\n            return null;\r\n        }\r\n        \r\n        const now = Date.now();\r\n        const isExpired = (now - cachedItem.timestamp) > this.CACHE_DURATION;\r\n        \r\n        if (isExpired) {\r\n            this.cache.delete(cacheKey);\r\n            this.lastRequestTimes.delete(cacheKey);\r\n            return null;\r\n        }\r\n        \r\n        return cachedItem.data;\r\n    }\r\n\r\n    // Cache data with timestamp\r\n    setCachedData(cacheKey, data) {\r\n        this.cache.set(cacheKey, {\r\n            data,\r\n            timestamp: Date.now()\r\n        });\r\n        this.lastRequestTimes.set(cacheKey, Date.now());\r\n    }\r\n\r\n    // Clear all expired cache entries\r\n    clearExpiredCache() {\r\n        const now = Date.now();\r\n        for (const [key, item] of this.cache.entries()) {\r\n            if ((now - item.timestamp) > this.CACHE_DURATION) {\r\n                this.cache.delete(key);\r\n                this.lastRequestTimes.delete(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Force refresh cache for a specific key\r\n    forceRefreshCache(cacheKey) {\r\n        this.cache.delete(cacheKey);\r\n        this.lastRequestTimes.delete(cacheKey);\r\n    }\r\n\r\n    // Get cache info for debugging\r\n    getCacheInfo() {\r\n        return {\r\n            cacheSize: this.cache.size,\r\n            entries: Array.from(this.cache.keys()),\r\n            lastRequestTimes: Object.fromEntries(this.lastRequestTimes)\r\n        };\r\n    }\r\n\r\n    // Check if cache entry is fresh (less than 1 day old)\r\n    isCacheFresh(cacheKey) {\r\n        const cachedItem = this.cache.get(cacheKey);\r\n        if (!cachedItem) return false;\r\n        \r\n        const now = Date.now();\r\n        const oneDayInMs = 24 * 60 * 60 * 1000;\r\n        return (now - cachedItem.timestamp) < oneDayInMs;\r\n    }\r\n\r\n    // Get time until cache expires\r\n    getTimeUntilExpiry(cacheKey) {\r\n        const cachedItem = this.cache.get(cacheKey);\r\n        if (!cachedItem) return 0;\r\n        \r\n        const now = Date.now();\r\n        const expiryTime = cachedItem.timestamp + this.CACHE_DURATION;\r\n        return Math.max(0, expiryTime - now);\r\n    }\r\n}\r\n\r\n// Create singleton instance\r\nconst aiCache = new AICache();\r\n\r\n// AI API service with caching and rate limiting\r\nexport class AIService {\r\n    static async fetchWithCache(endpoint, params = {}, options = {}) {\r\n        const cacheKey = aiCache.generateCacheKey(endpoint, params);\r\n        \r\n        // Check if we have fresh cached data\r\n        const cachedData = aiCache.getCachedData(cacheKey);\r\n        if (cachedData && !options.forceRefresh) {\r\n            console.log(`[AI Cache] Using cached data for ${endpoint}`);\r\n            return {\r\n                data: cachedData,\r\n                fromCache: true,\r\n                cacheAge: Date.now() - aiCache.cache.get(cacheKey).timestamp\r\n            };\r\n        }\r\n\r\n        // Check rate limiting\r\n        if (!aiCache.canMakeRequest(cacheKey) && !options.forceRefresh) {\r\n            const lastRequestTime = aiCache.lastRequestTimes.get(cacheKey);\r\n            const timeUntilNext = aiCache.MIN_REQUEST_INTERVAL - (Date.now() - lastRequestTime);\r\n            throw new Error(`Rate limited. Please wait ${Math.ceil(timeUntilNext / 1000)} seconds before making another request.`);\r\n        }\r\n\r\n        try {\r\n            // Helper function to get auth headers\r\n            const getAuthHeaders = () => {\r\n                const token = localStorage.getItem('token');\r\n                return {\r\n                    'Content-Type': 'application/json',\r\n                    ...(token && { 'Authorization': `Bearer ${token}` }),\r\n                    ...options.headers\r\n                };\r\n            };\r\n\r\n            // Make API request\r\n            const url = `${process.env.REACT_APP_API_URL || 'http://localhost:8000'}${endpoint}`;\r\n            const response = await fetch(url, {\r\n                method: options.method || 'GET',\r\n                headers: getAuthHeaders(),\r\n                body: params && Object.keys(params).length > 0 ? JSON.stringify(params) : undefined,\r\n                ...options\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`API request failed: ${response.status} ${response.statusText}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            \r\n            // Cache the response\r\n            aiCache.setCachedData(cacheKey, data);\r\n            console.log(`[AI Cache] Cached new data for ${endpoint}`);\r\n            \r\n            return {\r\n                data,\r\n                fromCache: false,\r\n                cached: true\r\n            };\r\n        } catch (error) {\r\n            console.error(`[AI Service] Error fetching ${endpoint}:`, error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Insights API with caching\r\n    static async getInsights(forceRefresh = false) {\r\n        return this.fetchWithCache('/ai-coaching/workout-analysis', {}, { \r\n            forceRefresh,\r\n            method: 'GET' \r\n        });\r\n    }\r\n\r\n    // AI Coaching chat with rate limiting\r\n    static async sendChatMessage(request, forceRefresh = false) {\r\n        // Ensure request matches backend AICoachingRequest schema\r\n        const requestBody = {\r\n            message: request.message || request,\r\n            conversation_history: request.conversation_history || [],\r\n            user_data: request.user_data || null\r\n        };\r\n        \r\n        return this.fetchWithCache('/ai-coaching', requestBody, { \r\n            forceRefresh,\r\n            method: 'POST' \r\n        });\r\n    }\r\n\r\n    // Exercise suggestions with caching\r\n    static async getExerciseSuggestions(muscleGroup, currentExercise, forceRefresh = false) {\r\n        return this.fetchWithCache('/ai-coaching/exercise-suggestions', {\r\n            muscle_group: muscleGroup,\r\n            current_exercise: currentExercise\r\n        }, { \r\n            forceRefresh,\r\n            method: 'POST' \r\n        });\r\n    }\r\n\r\n    // Get cache status\r\n    static getCacheStatus() {\r\n        return aiCache.getCacheInfo();\r\n    }\r\n\r\n    // Clear specific cache\r\n    static clearCache(endpoint, params = {}) {\r\n        const cacheKey = aiCache.generateCacheKey(endpoint, params);\r\n        aiCache.forceRefreshCache(cacheKey);\r\n    }\r\n\r\n    // Clear all cache\r\n    static clearAllCache() {\r\n        aiCache.cache.clear();\r\n        aiCache.lastRequestTimes.clear();\r\n    }\r\n\r\n    // Clean expired cache entries\r\n    static cleanExpiredCache() {\r\n        aiCache.clearExpiredCache();\r\n    }\r\n}\r\n\r\n// Automatically clean expired cache every hour\r\nsetInterval(() => {\r\n    AIService.cleanExpiredCache();\r\n    console.log('[AI Cache] Cleaned expired cache entries');\r\n}, 60 * 60 * 1000); // 1 hour\r\n\r\nexport default AIService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}