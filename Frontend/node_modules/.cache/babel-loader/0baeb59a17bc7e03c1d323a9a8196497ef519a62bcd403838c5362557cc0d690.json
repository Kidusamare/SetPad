{"ast":null,"code":"import { auth } from \"../utils/auth\";\nconst BACKEND_URL = \"http://localhost:8000\"; // Change for production\n\nexport const backendApi = {\n  /**\r\n   * Get authentication headers with Firebase ID token\r\n   */\n  async getAuthHeaders() {\n    const user = auth.currentUser;\n    if (!user) throw new Error(\"User not authenticated\");\n    const token = await user.getIdToken();\n    return {\n      \"Authorization\": `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    };\n  },\n  /**\r\n   * Generate AI coaching response\r\n   * @param {string} userMessage - User's question or request\r\n   * @param {object} workoutData - Optional workout data for context\r\n   * @param {string} context - Optional additional context\r\n   * @returns {Promise<object>} AI coaching response\r\n   */\n  async generateCoachingResponse(userMessage, workoutData = null, context = null) {\n    try {\n      const headers = await this.getAuthHeaders();\n      const response = await fetch(`${BACKEND_URL}/generate-coaching-response`, {\n        method: \"POST\",\n        headers,\n        body: JSON.stringify({\n          user_message: userMessage,\n          workout_data: workoutData,\n          context: context\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`API error: ${errorData.detail || response.statusText}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error(\"Backend API error:\", error);\n      throw error;\n    }\n  },\n  /**\r\n   * Get user profile from backend\r\n   * @returns {Promise<object>} User profile data\r\n   */\n  async getUserProfile() {\n    try {\n      const headers = await this.getAuthHeaders();\n      const response = await fetch(`${BACKEND_URL}/user/profile`, {\n        headers\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`API error: ${errorData.detail || response.statusText}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error(\"Backend API error:\", error);\n      throw error;\n    }\n  },\n  /**\r\n   * Check backend health status\r\n   * @returns {Promise<object>} Health status\r\n   */\n  async checkHealth() {\n    try {\n      const response = await fetch(`${BACKEND_URL}/health`);\n      if (!response.ok) {\n        throw new Error(`Health check failed: ${response.statusText}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error(\"Health check error:\", error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["auth","BACKEND_URL","backendApi","getAuthHeaders","user","currentUser","Error","token","getIdToken","generateCoachingResponse","userMessage","workoutData","context","headers","response","fetch","method","body","JSON","stringify","user_message","workout_data","ok","errorData","json","detail","statusText","error","console","getUserProfile","checkHealth"],"sources":["C:/Users/kidus/OneDrive/Documentos/Summer2025/fitness-tracker-frontend/src/services/backendApi.js"],"sourcesContent":["import { auth } from \"../utils/auth\";\r\n\r\nconst BACKEND_URL = \"http://localhost:8000\"; // Change for production\r\n\r\nexport const backendApi = {\r\n  /**\r\n   * Get authentication headers with Firebase ID token\r\n   */\r\n  async getAuthHeaders() {\r\n    const user = auth.currentUser;\r\n    if (!user) throw new Error(\"User not authenticated\");\r\n    const token = await user.getIdToken();\r\n    return {\r\n      \"Authorization\": `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\"\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Generate AI coaching response\r\n   * @param {string} userMessage - User's question or request\r\n   * @param {object} workoutData - Optional workout data for context\r\n   * @param {string} context - Optional additional context\r\n   * @returns {Promise<object>} AI coaching response\r\n   */\r\n  async generateCoachingResponse(userMessage, workoutData = null, context = null) {\r\n    try {\r\n      const headers = await this.getAuthHeaders();\r\n      const response = await fetch(`${BACKEND_URL}/generate-coaching-response`, {\r\n        method: \"POST\",\r\n        headers,\r\n        body: JSON.stringify({\r\n          user_message: userMessage,\r\n          workout_data: workoutData,\r\n          context: context\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(`API error: ${errorData.detail || response.statusText}`);\r\n      }\r\n\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error(\"Backend API error:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get user profile from backend\r\n   * @returns {Promise<object>} User profile data\r\n   */\r\n  async getUserProfile() {\r\n    try {\r\n      const headers = await this.getAuthHeaders();\r\n      const response = await fetch(`${BACKEND_URL}/user/profile`, {\r\n        headers\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(`API error: ${errorData.detail || response.statusText}`);\r\n      }\r\n\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error(\"Backend API error:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Check backend health status\r\n   * @returns {Promise<object>} Health status\r\n   */\r\n  async checkHealth() {\r\n    try {\r\n      const response = await fetch(`${BACKEND_URL}/health`);\r\n      if (!response.ok) {\r\n        throw new Error(`Health check failed: ${response.statusText}`);\r\n      }\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error(\"Health check error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,SAASA,IAAI,QAAQ,eAAe;AAEpC,MAAMC,WAAW,GAAG,uBAAuB,CAAC,CAAC;;AAE7C,OAAO,MAAMC,UAAU,GAAG;EACxB;AACF;AACA;EACE,MAAMC,cAAcA,CAAA,EAAG;IACrB,MAAMC,IAAI,GAAGJ,IAAI,CAACK,WAAW;IAC7B,IAAI,CAACD,IAAI,EAAE,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;IACpD,MAAMC,KAAK,GAAG,MAAMH,IAAI,CAACI,UAAU,CAAC,CAAC;IACrC,OAAO;MACL,eAAe,EAAE,UAAUD,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAME,wBAAwBA,CAACC,WAAW,EAAEC,WAAW,GAAG,IAAI,EAAEC,OAAO,GAAG,IAAI,EAAE;IAC9E,IAAI;MACF,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACV,cAAc,CAAC,CAAC;MAC3C,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,WAAW,6BAA6B,EAAE;QACxEe,MAAM,EAAE,MAAM;QACdH,OAAO;QACPI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,YAAY,EAAEV,WAAW;UACzBW,YAAY,EAAEV,WAAW;UACzBC,OAAO,EAAEA;QACX,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIlB,KAAK,CAAC,cAAciB,SAAS,CAACE,MAAM,IAAIX,QAAQ,CAACY,UAAU,EAAE,CAAC;MAC1E;MAEA,OAAOZ,QAAQ,CAACU,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;EACE,MAAME,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF,MAAMhB,OAAO,GAAG,MAAM,IAAI,CAACV,cAAc,CAAC,CAAC;MAC3C,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,WAAW,eAAe,EAAE;QAC1DY;MACF,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIlB,KAAK,CAAC,cAAciB,SAAS,CAACE,MAAM,IAAIX,QAAQ,CAACY,UAAU,EAAE,CAAC;MAC1E;MAEA,OAAOZ,QAAQ,CAACU,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;EACE,MAAMG,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,WAAW,SAAS,CAAC;MACrD,IAAI,CAACa,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIhB,KAAK,CAAC,wBAAwBQ,QAAQ,CAACY,UAAU,EAAE,CAAC;MAChE;MACA,OAAOZ,QAAQ,CAACU,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}