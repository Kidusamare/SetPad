{"ast":null,"code":"import{getTables,getTable,createTable,updateTable,deleteTable}from'../services/api';export default class TrainingLogManager{// List all tables\nasync listTables(){return await getTables();}// Load a single table by ID\nasync loadTable(id){return await getTable(id);}// Create a new table in the backend\nasync createTable(log){return await createTable(log);}// Save (update) a table\nasync saveTable(log){if(!log.id){// Create new\nreturn await createTable(log);}else{// Update existing\nreturn await updateTable(log.id,log);}}// Delete a table by ID\nasync deleteTable(id){return await deleteTable(id);}// Get all unique muscle groups from all logs\nasync getUniqueMuscleGroups(){const tables=await getTables();const muscleGroups=new Set();tables.forEach(data=>{if(data.rows){data.rows.forEach(row=>{if(row.muscleGroup&&row.muscleGroup.trim()){muscleGroups.add(row.muscleGroup.trim());}});}});return Array.from(muscleGroups).sort();}// Get all unique exercises from all logs\nasync getUniqueExercises(){const tables=await getTables();const exercises=new Set();tables.forEach(data=>{if(data.rows){data.rows.forEach(row=>{if(row.exercise&&row.exercise.trim()){exercises.add(row.exercise.trim());}});}});return Array.from(exercises).sort();}// Get exercises for a specific muscle group\nasync getExercisesForMuscleGroup(muscleGroup){const tables=await getTables();const exercises=new Set();tables.forEach(data=>{if(data.rows){data.rows.forEach(row=>{if(row.muscleGroup===muscleGroup&&row.exercise&&row.exercise.trim()){exercises.add(row.exercise.trim());}});}});return Array.from(exercises).sort();}// Create a new table object (not saved yet)\ncreateNewTable(){const id=crypto.randomUUID();const today=new Date().toISOString().split('T')[0];return{id,tableName:'New Log',date:today,rows:[{id:0,muscleGroup:'',exercise:'',sets:[{reps:'',weight:''}],notes:'',showNotes:false,weightUnit:'lbs'}]};}}","map":{"version":3,"names":["getTables","getTable","createTable","updateTable","deleteTable","TrainingLogManager","listTables","loadTable","id","log","saveTable","getUniqueMuscleGroups","tables","muscleGroups","Set","forEach","data","rows","row","muscleGroup","trim","add","Array","from","sort","getUniqueExercises","exercises","exercise","getExercisesForMuscleGroup","createNewTable","crypto","randomUUID","today","Date","toISOString","split","tableName","date","sets","reps","weight","notes","showNotes","weightUnit"],"sources":["C:/Users/kidus/OneDrive/Documentos/Summer2025/fitness-tracker-frontend/src/components/TrainingLogManager.jsx"],"sourcesContent":["import { getTables, getTable, createTable, updateTable, deleteTable } from '../services/api';\r\n\r\nexport default class TrainingLogManager {\r\n  // List all tables\r\n  async listTables() {\r\n    return await getTables();\r\n  }\r\n\r\n  // Load a single table by ID\r\n  async loadTable(id) {\r\n    return await getTable(id);\r\n  }\r\n\r\n  // Create a new table in the backend\r\n  async createTable(log) {\r\n    return await createTable(log);\r\n  }\r\n\r\n  // Save (update) a table\r\n  async saveTable(log) {\r\n    if (!log.id) {\r\n      // Create new\r\n      return await createTable(log);\r\n    } else {\r\n      // Update existing\r\n      return await updateTable(log.id, log);\r\n    }\r\n  }\r\n\r\n  // Delete a table by ID\r\n  async deleteTable(id) {\r\n    return await deleteTable(id);\r\n  }\r\n\r\n  // Get all unique muscle groups from all logs\r\n  async getUniqueMuscleGroups() {\r\n    const tables = await getTables();\r\n    const muscleGroups = new Set();\r\n    tables.forEach(data => {\r\n      if (data.rows) {\r\n        data.rows.forEach(row => {\r\n          if (row.muscleGroup && row.muscleGroup.trim()) {\r\n            muscleGroups.add(row.muscleGroup.trim());\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return Array.from(muscleGroups).sort();\r\n  }\r\n\r\n  // Get all unique exercises from all logs\r\n  async getUniqueExercises() {\r\n    const tables = await getTables();\r\n    const exercises = new Set();\r\n    tables.forEach(data => {\r\n      if (data.rows) {\r\n        data.rows.forEach(row => {\r\n          if (row.exercise && row.exercise.trim()) {\r\n            exercises.add(row.exercise.trim());\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return Array.from(exercises).sort();\r\n  }\r\n\r\n  // Get exercises for a specific muscle group\r\n  async getExercisesForMuscleGroup(muscleGroup) {\r\n    const tables = await getTables();\r\n    const exercises = new Set();\r\n    tables.forEach(data => {\r\n      if (data.rows) {\r\n        data.rows.forEach(row => {\r\n          if (row.muscleGroup === muscleGroup && row.exercise && row.exercise.trim()) {\r\n            exercises.add(row.exercise.trim());\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return Array.from(exercises).sort();\r\n  }\r\n\r\n  // Create a new table object (not saved yet)\r\n  createNewTable() {\r\n    const id = crypto.randomUUID();\r\n    const today = new Date().toISOString().split('T')[0];\r\n    return {\r\n      id,\r\n      tableName: 'New Log',\r\n      date: today,\r\n      rows: [\r\n        {\r\n          id: 0,\r\n          muscleGroup: '',\r\n          exercise: '',\r\n          sets: [{ reps: '', weight: '' }],\r\n          notes: '',\r\n          showNotes: false,\r\n          weightUnit: 'lbs',\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}