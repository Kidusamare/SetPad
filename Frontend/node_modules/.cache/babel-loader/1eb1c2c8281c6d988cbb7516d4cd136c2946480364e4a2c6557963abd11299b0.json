{"ast":null,"code":"import { doc, setDoc, getDoc, getDocs, deleteDoc, collection, query, orderBy } from \"firebase/firestore\";\nimport { db } from \"../utils/auth\";\nexport default class TrainingLogManager {\n  constructor() {\n    // No user context\n  }\n\n  // Get Firestore document reference for a specific table\n  getTableDoc(logId) {\n    return doc(db, \"tables\", logId);\n  }\n\n  // Get Firestore collection reference for tables\n  getTablesCollection() {\n    return collection(db, \"tables\");\n  }\n  async loadTable(id) {\n    try {\n      const docRef = this.getTableDoc(id);\n      const docSnap = await getDoc(docRef);\n      if (docSnap.exists()) {\n        return docSnap.data();\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.error(\"Error loading table:\", error);\n      return null;\n    }\n  }\n  async saveTable(log) {\n    try {\n      const docRef = this.getTableDoc(log.id);\n      await setDoc(docRef, {\n        ...log,\n        lastOpened: new Date().toISOString()\n      });\n      return {\n        message: \"Saved\"\n      };\n    } catch (error) {\n      console.error(\"Error saving table:\", error);\n      throw new Error(\"Save failed\");\n    }\n  }\n  async deleteTable(id) {\n    try {\n      const docRef = this.getTableDoc(id);\n      await deleteDoc(docRef);\n      return true;\n    } catch (error) {\n      console.error(\"Error deleting table:\", error);\n      throw new Error(\"Delete failed\");\n    }\n  }\n  async listTables() {\n    try {\n      const collectionRef = this.getTablesCollection();\n      const q = query(collectionRef, orderBy(\"lastOpened\", \"desc\"));\n      const querySnapshot = await getDocs(q);\n      const tables = [];\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        tables.push({\n          id: data.id,\n          tableName: data.tableName,\n          date: data.date,\n          lastOpened: data.lastOpened\n        });\n      });\n      return tables;\n    } catch (error) {\n      console.error(\"Error listing tables:\", error);\n      return [];\n    }\n  }\n\n  // Get all unique muscle groups from user's logs\n  async getUniqueMuscleGroups() {\n    try {\n      const collectionRef = this.getTablesCollection();\n      const querySnapshot = await getDocs(collectionRef);\n      const muscleGroups = new Set();\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        if (data.rows) {\n          data.rows.forEach(row => {\n            if (row.muscleGroup && row.muscleGroup.trim()) {\n              muscleGroups.add(row.muscleGroup.trim());\n            }\n          });\n        }\n      });\n      return Array.from(muscleGroups).sort();\n    } catch (error) {\n      console.error(\"Error fetching muscle groups:\", error);\n      return [];\n    }\n  }\n\n  // Get all unique exercises from user's logs\n  async getUniqueExercises() {\n    try {\n      const collectionRef = this.getTablesCollection();\n      const querySnapshot = await getDocs(collectionRef);\n      const exercises = new Set();\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        if (data.rows) {\n          data.rows.forEach(row => {\n            if (row.exercise && row.exercise.trim()) {\n              exercises.add(row.exercise.trim());\n            }\n          });\n        }\n      });\n      return Array.from(exercises).sort();\n    } catch (error) {\n      console.error(\"Error fetching exercises:\", error);\n      return [];\n    }\n  }\n\n  // Get exercises for a specific muscle group\n  async getExercisesForMuscleGroup(muscleGroup) {\n    try {\n      const collectionRef = this.getTablesCollection();\n      const querySnapshot = await getDocs(collectionRef);\n      const exercises = new Set();\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        if (data.rows) {\n          data.rows.forEach(row => {\n            if (row.muscleGroup === muscleGroup && row.exercise && row.exercise.trim()) {\n              exercises.add(row.exercise.trim());\n            }\n          });\n        }\n      });\n      return Array.from(exercises).sort();\n    } catch (error) {\n      console.error(\"Error fetching exercises for muscle group:\", error);\n      return [];\n    }\n  }\n  createNewTable() {\n    const id = crypto.randomUUID();\n    const today = new Date().toISOString().split(\"T\")[0];\n    return {\n      id,\n      tableName: \"New Log\",\n      date: today,\n      rows: [{\n        id: 0,\n        muscleGroup: \"\",\n        exercise: \"\",\n        sets: [{\n          reps: \"\",\n          weight: \"\"\n        }],\n        notes: \"\",\n        showNotes: false,\n        weightUnit: \"lbs\"\n      }]\n    };\n  }\n}","map":{"version":3,"names":["doc","setDoc","getDoc","getDocs","deleteDoc","collection","query","orderBy","db","TrainingLogManager","constructor","getTableDoc","logId","getTablesCollection","loadTable","id","docRef","docSnap","exists","data","error","console","saveTable","log","lastOpened","Date","toISOString","message","Error","deleteTable","listTables","collectionRef","q","querySnapshot","tables","forEach","push","tableName","date","getUniqueMuscleGroups","muscleGroups","Set","rows","row","muscleGroup","trim","add","Array","from","sort","getUniqueExercises","exercises","exercise","getExercisesForMuscleGroup","createNewTable","crypto","randomUUID","today","split","sets","reps","weight","notes","showNotes","weightUnit"],"sources":["C:/Users/kidus/OneDrive/Documentos/Summer2025/fitness-tracker-frontend/src/components/TrainingLogManager.jsx"],"sourcesContent":["import { \r\n  doc, \r\n  setDoc, \r\n  getDoc, \r\n  getDocs, \r\n  deleteDoc, \r\n  collection,\r\n  query,\r\n  orderBy \r\n} from \"firebase/firestore\";\r\nimport { db } from \"../utils/auth\";\r\n\r\nexport default class TrainingLogManager {\r\n  constructor() {\r\n    // No user context\r\n  }\r\n\r\n  // Get Firestore document reference for a specific table\r\n  getTableDoc(logId) {\r\n    return doc(db, \"tables\", logId);\r\n  }\r\n\r\n  // Get Firestore collection reference for tables\r\n  getTablesCollection() {\r\n    return collection(db, \"tables\");\r\n  }\r\n\r\n  async loadTable(id) {\r\n    try {\r\n      const docRef = this.getTableDoc(id);\r\n      const docSnap = await getDoc(docRef);\r\n      \r\n      if (docSnap.exists()) {\r\n        return docSnap.data();\r\n      } else {\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading table:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async saveTable(log) {\r\n    try {\r\n      const docRef = this.getTableDoc(log.id);\r\n      await setDoc(docRef, {\r\n        ...log,\r\n        lastOpened: new Date().toISOString()\r\n      });\r\n      return { message: \"Saved\" };\r\n    } catch (error) {\r\n      console.error(\"Error saving table:\", error);\r\n      throw new Error(\"Save failed\");\r\n    }\r\n  }\r\n\r\n  async deleteTable(id) {\r\n    try {\r\n      const docRef = this.getTableDoc(id);\r\n      await deleteDoc(docRef);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error deleting table:\", error);\r\n      throw new Error(\"Delete failed\");\r\n    }\r\n  }\r\n\r\n  async listTables() {\r\n    try {\r\n      const collectionRef = this.getTablesCollection();\r\n      const q = query(collectionRef, orderBy(\"lastOpened\", \"desc\"));\r\n      const querySnapshot = await getDocs(q);\r\n      \r\n      const tables = [];\r\n      querySnapshot.forEach((doc) => {\r\n        const data = doc.data();\r\n        tables.push({\r\n          id: data.id,\r\n          tableName: data.tableName,\r\n          date: data.date,\r\n          lastOpened: data.lastOpened\r\n        });\r\n      });\r\n      \r\n      return tables;\r\n    } catch (error) {\r\n      console.error(\"Error listing tables:\", error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get all unique muscle groups from user's logs\r\n  async getUniqueMuscleGroups() {\r\n    try {\r\n      const collectionRef = this.getTablesCollection();\r\n      const querySnapshot = await getDocs(collectionRef);\r\n      \r\n      const muscleGroups = new Set();\r\n      querySnapshot.forEach((doc) => {\r\n        const data = doc.data();\r\n        if (data.rows) {\r\n          data.rows.forEach(row => {\r\n            if (row.muscleGroup && row.muscleGroup.trim()) {\r\n              muscleGroups.add(row.muscleGroup.trim());\r\n            }\r\n          });\r\n        }\r\n      });\r\n      \r\n      return Array.from(muscleGroups).sort();\r\n    } catch (error) {\r\n      console.error(\"Error fetching muscle groups:\", error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get all unique exercises from user's logs\r\n  async getUniqueExercises() {\r\n    try {\r\n      const collectionRef = this.getTablesCollection();\r\n      const querySnapshot = await getDocs(collectionRef);\r\n      \r\n      const exercises = new Set();\r\n      querySnapshot.forEach((doc) => {\r\n        const data = doc.data();\r\n        if (data.rows) {\r\n          data.rows.forEach(row => {\r\n            if (row.exercise && row.exercise.trim()) {\r\n              exercises.add(row.exercise.trim());\r\n            }\r\n          });\r\n        }\r\n      });\r\n      \r\n      return Array.from(exercises).sort();\r\n    } catch (error) {\r\n      console.error(\"Error fetching exercises:\", error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get exercises for a specific muscle group\r\n  async getExercisesForMuscleGroup(muscleGroup) {\r\n    try {\r\n      const collectionRef = this.getTablesCollection();\r\n      const querySnapshot = await getDocs(collectionRef);\r\n      \r\n      const exercises = new Set();\r\n      querySnapshot.forEach((doc) => {\r\n        const data = doc.data();\r\n        if (data.rows) {\r\n          data.rows.forEach(row => {\r\n            if (row.muscleGroup === muscleGroup && row.exercise && row.exercise.trim()) {\r\n              exercises.add(row.exercise.trim());\r\n            }\r\n          });\r\n        }\r\n      });\r\n      \r\n      return Array.from(exercises).sort();\r\n    } catch (error) {\r\n      console.error(\"Error fetching exercises for muscle group:\", error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  createNewTable() {\r\n    const id = crypto.randomUUID();\r\n    const today = new Date().toISOString().split(\"T\")[0];\r\n    return {\r\n      id,\r\n      tableName: \"New Log\",\r\n      date: today,\r\n      rows: [\r\n        {\r\n          id: 0,\r\n          muscleGroup: \"\",\r\n          exercise: \"\",\r\n          sets: [{ reps: \"\", weight: \"\" }],\r\n          notes: \"\",\r\n          showNotes: false,\r\n          weightUnit: \"lbs\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}