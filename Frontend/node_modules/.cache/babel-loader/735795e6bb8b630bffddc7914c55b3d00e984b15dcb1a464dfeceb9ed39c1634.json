{"ast":null,"code":"import _objectSpread from\"C:/Users/kidus/OneDrive/Documentos/Summer2025/fitness-tracker-frontend/Frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * Offline Storage Service\n * Provides comprehensive offline support with automatic sync when online\n */class OfflineStorage{constructor(){this.dbName='SetPadOfflineDB';this.version=1;this.db=null;this.isOnline=navigator.onLine;this.syncQueue=[];this.initializeDB();this.setupOnlineDetection();}async initializeDB(){return new Promise((resolve,reject)=>{const request=indexedDB.open(this.dbName,this.version);request.onerror=()=>reject(request.error);request.onsuccess=()=>{this.db=request.result;resolve(this.db);};request.onupgradeneeded=event=>{const db=event.target.result;// Workout logs store\nif(!db.objectStoreNames.contains('workoutLogs')){const workoutStore=db.createObjectStore('workoutLogs',{keyPath:'id'});workoutStore.createIndex('date','date',{unique:false});workoutStore.createIndex('tableName','tableName',{unique:false});}// Sync queue store\nif(!db.objectStoreNames.contains('syncQueue')){db.createObjectStore('syncQueue',{keyPath:'id',autoIncrement:true});}// User preferences store\nif(!db.objectStoreNames.contains('preferences')){db.createObjectStore('preferences',{keyPath:'key'});}// Exercise history for smart defaults\nif(!db.objectStoreNames.contains('exerciseHistory')){const exerciseStore=db.createObjectStore('exerciseHistory',{keyPath:'id',autoIncrement:true});exerciseStore.createIndex('exercise','exercise',{unique:false});exerciseStore.createIndex('muscleGroup','muscleGroup',{unique:false});}};});}setupOnlineDetection(){window.addEventListener('online',()=>{this.isOnline=true;this.syncPendingChanges();console.log('[Offline Storage] Back online, syncing changes...');});window.addEventListener('offline',()=>{this.isOnline=false;console.log('[Offline Storage] Gone offline, storing changes locally');});}// Generic database operations\nasync performDBOperation(storeName,operation){let data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;if(!this.db)await this.initializeDB();return new Promise((resolve,reject)=>{const transaction=this.db.transaction([storeName],'readwrite');const store=transaction.objectStore(storeName);let request;switch(operation){case'get':request=store.get(data);break;case'getAll':request=store.getAll();break;case'put':request=store.put(data);break;case'delete':request=store.delete(data);break;case'clear':request=store.clear();break;default:reject(new Error(\"Unknown operation: \".concat(operation)));return;}request.onsuccess=()=>resolve(request.result);request.onerror=()=>reject(request.error);});}// Workout log operations\nasync saveWorkoutLog(log){try{// Always save locally first\nawait this.performDBOperation('workoutLogs','put',_objectSpread(_objectSpread({},log),{},{lastModified:new Date().toISOString(),synced:false}));// If online, try to sync immediately\nif(this.isOnline){await this.syncWorkoutLog(log);}else{// Add to sync queue\nawait this.addToSyncQueue('saveWorkoutLog',log);}return true;}catch(error){console.error('[Offline Storage] Error saving workout log:',error);return false;}}async loadWorkoutLog(id){try{return await this.performDBOperation('workoutLogs','get',id);}catch(error){console.error('[Offline Storage] Error loading workout log:',error);return null;}}async getAllWorkoutLogs(){try{const logs=await this.performDBOperation('workoutLogs','getAll');return logs.sort((a,b)=>new Date(b.date)-new Date(a.date));}catch(error){console.error('[Offline Storage] Error loading workout logs:',error);return[];}}async deleteWorkoutLog(id){try{await this.performDBOperation('workoutLogs','delete',id);if(this.isOnline){await this.syncDeleteWorkoutLog(id);}else{await this.addToSyncQueue('deleteWorkoutLog',{id});}return true;}catch(error){console.error('[Offline Storage] Error deleting workout log:',error);return false;}}// Sync queue operations\nasync addToSyncQueue(operation,data){await this.performDBOperation('syncQueue','put',{operation,data,timestamp:new Date().toISOString()});}async syncPendingChanges(){if(!this.isOnline)return;try{const syncItems=await this.performDBOperation('syncQueue','getAll');for(const item of syncItems){try{switch(item.operation){case'saveWorkoutLog':await this.syncWorkoutLog(item.data);break;case'deleteWorkoutLog':await this.syncDeleteWorkoutLog(item.data.id);break;}// Remove from sync queue after successful sync\nawait this.performDBOperation('syncQueue','delete',item.id);}catch(syncError){console.warn('[Offline Storage] Failed to sync item:',item,syncError);// Keep in queue for next attempt\n}}console.log(\"[Offline Storage] Synced \".concat(syncItems.length,\" pending changes\"));}catch(error){console.error('[Offline Storage] Error syncing pending changes:',error);}}// Actual sync operations (integrate with existing API)\nasync syncWorkoutLog(log){// This would integrate with your existing TrainingLogManager\ntry{const response=await fetch(\"\".concat(process.env.REACT_APP_API_URL||'http://localhost:8000',\"/tables\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(log)});if(response.ok){// Mark as synced in local storage\nawait this.performDBOperation('workoutLogs','put',_objectSpread(_objectSpread({},log),{},{synced:true,lastSynced:new Date().toISOString()}));}}catch(error){// Network error - keep in local storage unsynced\nthrow error;}}async syncDeleteWorkoutLog(id){try{await fetch(\"\".concat(process.env.REACT_APP_API_URL||'http://localhost:8000',\"/tables/\").concat(id),{method:'DELETE'});}catch(error){throw error;}}// Exercise history for smart defaults\nasync saveExerciseHistory(exerciseData){var _exerciseData$sets,_exerciseData$sets$,_exerciseData$sets2,_exerciseData$sets2$;const historyEntry={exercise:exerciseData.exercise,muscleGroup:exerciseData.muscleGroup,sets:exerciseData.sets,date:exerciseData.date||new Date().toISOString(),weight:((_exerciseData$sets=exerciseData.sets)===null||_exerciseData$sets===void 0?void 0:(_exerciseData$sets$=_exerciseData$sets[0])===null||_exerciseData$sets$===void 0?void 0:_exerciseData$sets$.weight)||'',reps:((_exerciseData$sets2=exerciseData.sets)===null||_exerciseData$sets2===void 0?void 0:(_exerciseData$sets2$=_exerciseData$sets2[0])===null||_exerciseData$sets2$===void 0?void 0:_exerciseData$sets2$.reps)||''};await this.performDBOperation('exerciseHistory','put',historyEntry);}async getExerciseHistory(exerciseName){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;try{const allHistory=await this.performDBOperation('exerciseHistory','getAll');return allHistory.filter(entry=>{var _entry$exercise;return((_entry$exercise=entry.exercise)===null||_entry$exercise===void 0?void 0:_entry$exercise.toLowerCase())===(exerciseName===null||exerciseName===void 0?void 0:exerciseName.toLowerCase());}).sort((a,b)=>new Date(b.date)-new Date(a.date)).slice(0,limit);}catch(error){console.error('[Offline Storage] Error getting exercise history:',error);return[];}}// User preferences\nasync savePreference(key,value){await this.performDBOperation('preferences','put',{key,value});}async getPreference(key){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{const result=await this.performDBOperation('preferences','get',key);return result?result.value:defaultValue;}catch(error){return defaultValue;}}// Utility methods\nasync getStorageInfo(){var _workoutLogs$find;const workoutLogs=await this.getAllWorkoutLogs();const syncQueue=await this.performDBOperation('syncQueue','getAll');return{isOnline:this.isOnline,totalWorkouts:workoutLogs.length,unsyncedWorkouts:workoutLogs.filter(log=>!log.synced).length,pendingSyncItems:syncQueue.length,lastSync:((_workoutLogs$find=workoutLogs.find(log=>log.synced))===null||_workoutLogs$find===void 0?void 0:_workoutLogs$find.lastSynced)||null};}async clearAllData(){const stores=['workoutLogs','syncQueue','preferences','exerciseHistory'];for(const store of stores){await this.performDBOperation(store,'clear');}}}// Create singleton instance\nconst offlineStorage=new OfflineStorage();export default offlineStorage;","map":{"version":3,"names":["OfflineStorage","constructor","dbName","version","db","isOnline","navigator","onLine","syncQueue","initializeDB","setupOnlineDetection","Promise","resolve","reject","request","indexedDB","open","onerror","error","onsuccess","result","onupgradeneeded","event","target","objectStoreNames","contains","workoutStore","createObjectStore","keyPath","createIndex","unique","autoIncrement","exerciseStore","window","addEventListener","syncPendingChanges","console","log","performDBOperation","storeName","operation","data","arguments","length","undefined","transaction","store","objectStore","get","getAll","put","delete","clear","Error","concat","saveWorkoutLog","_objectSpread","lastModified","Date","toISOString","synced","syncWorkoutLog","addToSyncQueue","loadWorkoutLog","id","getAllWorkoutLogs","logs","sort","a","b","date","deleteWorkoutLog","syncDeleteWorkoutLog","timestamp","syncItems","item","syncError","warn","response","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","ok","lastSynced","saveExerciseHistory","exerciseData","_exerciseData$sets","_exerciseData$sets$","_exerciseData$sets2","_exerciseData$sets2$","historyEntry","exercise","muscleGroup","sets","weight","reps","getExerciseHistory","exerciseName","limit","allHistory","filter","entry","_entry$exercise","toLowerCase","slice","savePreference","key","value","getPreference","defaultValue","getStorageInfo","_workoutLogs$find","workoutLogs","totalWorkouts","unsyncedWorkouts","pendingSyncItems","lastSync","find","clearAllData","stores","offlineStorage"],"sources":["C:/Users/kidus/OneDrive/Documentos/Summer2025/fitness-tracker-frontend/Frontend/src/services/offlineStorage.js"],"sourcesContent":["/**\n * Offline Storage Service\n * Provides comprehensive offline support with automatic sync when online\n */\n\nclass OfflineStorage {\n    constructor() {\n        this.dbName = 'SetPadOfflineDB';\n        this.version = 1;\n        this.db = null;\n        this.isOnline = navigator.onLine;\n        this.syncQueue = [];\n        this.initializeDB();\n        this.setupOnlineDetection();\n    }\n\n    async initializeDB() {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.dbName, this.version);\n            \n            request.onerror = () => reject(request.error);\n            request.onsuccess = () => {\n                this.db = request.result;\n                resolve(this.db);\n            };\n            \n            request.onupgradeneeded = (event) => {\n                const db = event.target.result;\n                \n                // Workout logs store\n                if (!db.objectStoreNames.contains('workoutLogs')) {\n                    const workoutStore = db.createObjectStore('workoutLogs', { keyPath: 'id' });\n                    workoutStore.createIndex('date', 'date', { unique: false });\n                    workoutStore.createIndex('tableName', 'tableName', { unique: false });\n                }\n                \n                // Sync queue store\n                if (!db.objectStoreNames.contains('syncQueue')) {\n                    db.createObjectStore('syncQueue', { keyPath: 'id', autoIncrement: true });\n                }\n                \n                // User preferences store\n                if (!db.objectStoreNames.contains('preferences')) {\n                    db.createObjectStore('preferences', { keyPath: 'key' });\n                }\n                \n                // Exercise history for smart defaults\n                if (!db.objectStoreNames.contains('exerciseHistory')) {\n                    const exerciseStore = db.createObjectStore('exerciseHistory', { keyPath: 'id', autoIncrement: true });\n                    exerciseStore.createIndex('exercise', 'exercise', { unique: false });\n                    exerciseStore.createIndex('muscleGroup', 'muscleGroup', { unique: false });\n                }\n            };\n        });\n    }\n\n    setupOnlineDetection() {\n        window.addEventListener('online', () => {\n            this.isOnline = true;\n            this.syncPendingChanges();\n            console.log('[Offline Storage] Back online, syncing changes...');\n        });\n        \n        window.addEventListener('offline', () => {\n            this.isOnline = false;\n            console.log('[Offline Storage] Gone offline, storing changes locally');\n        });\n    }\n\n    // Generic database operations\n    async performDBOperation(storeName, operation, data = null) {\n        if (!this.db) await this.initializeDB();\n        \n        return new Promise((resolve, reject) => {\n            const transaction = this.db.transaction([storeName], 'readwrite');\n            const store = transaction.objectStore(storeName);\n            let request;\n            \n            switch (operation) {\n                case 'get':\n                    request = store.get(data);\n                    break;\n                case 'getAll':\n                    request = store.getAll();\n                    break;\n                case 'put':\n                    request = store.put(data);\n                    break;\n                case 'delete':\n                    request = store.delete(data);\n                    break;\n                case 'clear':\n                    request = store.clear();\n                    break;\n                default:\n                    reject(new Error(`Unknown operation: ${operation}`));\n                    return;\n            }\n            \n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    // Workout log operations\n    async saveWorkoutLog(log) {\n        try {\n            // Always save locally first\n            await this.performDBOperation('workoutLogs', 'put', {\n                ...log,\n                lastModified: new Date().toISOString(),\n                synced: false\n            });\n            \n            // If online, try to sync immediately\n            if (this.isOnline) {\n                await this.syncWorkoutLog(log);\n            } else {\n                // Add to sync queue\n                await this.addToSyncQueue('saveWorkoutLog', log);\n            }\n            \n            return true;\n        } catch (error) {\n            console.error('[Offline Storage] Error saving workout log:', error);\n            return false;\n        }\n    }\n\n    async loadWorkoutLog(id) {\n        try {\n            return await this.performDBOperation('workoutLogs', 'get', id);\n        } catch (error) {\n            console.error('[Offline Storage] Error loading workout log:', error);\n            return null;\n        }\n    }\n\n    async getAllWorkoutLogs() {\n        try {\n            const logs = await this.performDBOperation('workoutLogs', 'getAll');\n            return logs.sort((a, b) => new Date(b.date) - new Date(a.date));\n        } catch (error) {\n            console.error('[Offline Storage] Error loading workout logs:', error);\n            return [];\n        }\n    }\n\n    async deleteWorkoutLog(id) {\n        try {\n            await this.performDBOperation('workoutLogs', 'delete', id);\n            \n            if (this.isOnline) {\n                await this.syncDeleteWorkoutLog(id);\n            } else {\n                await this.addToSyncQueue('deleteWorkoutLog', { id });\n            }\n            \n            return true;\n        } catch (error) {\n            console.error('[Offline Storage] Error deleting workout log:', error);\n            return false;\n        }\n    }\n\n    // Sync queue operations\n    async addToSyncQueue(operation, data) {\n        await this.performDBOperation('syncQueue', 'put', {\n            operation,\n            data,\n            timestamp: new Date().toISOString()\n        });\n    }\n\n    async syncPendingChanges() {\n        if (!this.isOnline) return;\n        \n        try {\n            const syncItems = await this.performDBOperation('syncQueue', 'getAll');\n            \n            for (const item of syncItems) {\n                try {\n                    switch (item.operation) {\n                        case 'saveWorkoutLog':\n                            await this.syncWorkoutLog(item.data);\n                            break;\n                        case 'deleteWorkoutLog':\n                            await this.syncDeleteWorkoutLog(item.data.id);\n                            break;\n                    }\n                    \n                    // Remove from sync queue after successful sync\n                    await this.performDBOperation('syncQueue', 'delete', item.id);\n                    \n                } catch (syncError) {\n                    console.warn('[Offline Storage] Failed to sync item:', item, syncError);\n                    // Keep in queue for next attempt\n                }\n            }\n            \n            console.log(`[Offline Storage] Synced ${syncItems.length} pending changes`);\n        } catch (error) {\n            console.error('[Offline Storage] Error syncing pending changes:', error);\n        }\n    }\n\n    // Actual sync operations (integrate with existing API)\n    async syncWorkoutLog(log) {\n        // This would integrate with your existing TrainingLogManager\n        try {\n            const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/tables`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(log)\n            });\n            \n            if (response.ok) {\n                // Mark as synced in local storage\n                await this.performDBOperation('workoutLogs', 'put', {\n                    ...log,\n                    synced: true,\n                    lastSynced: new Date().toISOString()\n                });\n            }\n        } catch (error) {\n            // Network error - keep in local storage unsynced\n            throw error;\n        }\n    }\n\n    async syncDeleteWorkoutLog(id) {\n        try {\n            await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/tables/${id}`, {\n                method: 'DELETE'\n            });\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    // Exercise history for smart defaults\n    async saveExerciseHistory(exerciseData) {\n        const historyEntry = {\n            exercise: exerciseData.exercise,\n            muscleGroup: exerciseData.muscleGroup,\n            sets: exerciseData.sets,\n            date: exerciseData.date || new Date().toISOString(),\n            weight: exerciseData.sets?.[0]?.weight || '',\n            reps: exerciseData.sets?.[0]?.reps || ''\n        };\n        \n        await this.performDBOperation('exerciseHistory', 'put', historyEntry);\n    }\n\n    async getExerciseHistory(exerciseName, limit = 10) {\n        try {\n            const allHistory = await this.performDBOperation('exerciseHistory', 'getAll');\n            return allHistory\n                .filter(entry => entry.exercise?.toLowerCase() === exerciseName?.toLowerCase())\n                .sort((a, b) => new Date(b.date) - new Date(a.date))\n                .slice(0, limit);\n        } catch (error) {\n            console.error('[Offline Storage] Error getting exercise history:', error);\n            return [];\n        }\n    }\n\n    // User preferences\n    async savePreference(key, value) {\n        await this.performDBOperation('preferences', 'put', { key, value });\n    }\n\n    async getPreference(key, defaultValue = null) {\n        try {\n            const result = await this.performDBOperation('preferences', 'get', key);\n            return result ? result.value : defaultValue;\n        } catch (error) {\n            return defaultValue;\n        }\n    }\n\n    // Utility methods\n    async getStorageInfo() {\n        const workoutLogs = await this.getAllWorkoutLogs();\n        const syncQueue = await this.performDBOperation('syncQueue', 'getAll');\n        \n        return {\n            isOnline: this.isOnline,\n            totalWorkouts: workoutLogs.length,\n            unsyncedWorkouts: workoutLogs.filter(log => !log.synced).length,\n            pendingSyncItems: syncQueue.length,\n            lastSync: workoutLogs.find(log => log.synced)?.lastSynced || null\n        };\n    }\n\n    async clearAllData() {\n        const stores = ['workoutLogs', 'syncQueue', 'preferences', 'exerciseHistory'];\n        for (const store of stores) {\n            await this.performDBOperation(store, 'clear');\n        }\n    }\n}\n\n// Create singleton instance\nconst offlineStorage = new OfflineStorage();\n\nexport default offlineStorage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}