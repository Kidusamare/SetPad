{"ast":null,"code":"// Search Service\n// Provides comprehensive search functionality across workouts and exercises\n\nexport class SearchService {\n  /**\r\n   * Search across all workouts and exercises\r\n   * @param {Array} workouts - Array of workout objects\r\n   * @param {string} searchTerm - Search term to look for\r\n   * @param {Object} filters - Search filters\r\n   * @returns {Object} Search results organized by type\r\n   */\n  static searchWorkouts(workouts, searchTerm, filters = {}) {\n    if (!searchTerm.trim()) {\n      return {\n        workouts: [],\n        exercises: [],\n        muscleGroups: [],\n        suggestions: []\n      };\n    }\n    const term = searchTerm.toLowerCase().trim();\n    const results = {\n      workouts: [],\n      exercises: [],\n      muscleGroups: [],\n      suggestions: []\n    };\n\n    // Search through workouts\n    workouts.forEach(workout => {\n      const workoutMatch = this.searchInWorkout(workout, term, filters);\n      if (workoutMatch.matches) {\n        results.workouts.push({\n          ...workout,\n          matchType: workoutMatch.matchType,\n          matchedExercises: workoutMatch.matchedExercises,\n          relevanceScore: workoutMatch.relevanceScore\n        });\n      }\n    });\n\n    // Extract unique exercises and muscle groups\n    const allExercises = new Set();\n    const allMuscleGroups = new Set();\n    workouts.forEach(workout => {\n      var _workout$rows;\n      (_workout$rows = workout.rows) === null || _workout$rows === void 0 ? void 0 : _workout$rows.forEach(row => {\n        if (row.exercise) {\n          allExercises.add(row.exercise.toLowerCase());\n          if (this.fuzzyMatch(row.exercise.toLowerCase(), term)) {\n            results.exercises.push({\n              name: row.exercise,\n              muscleGroup: row.muscleGroup,\n              workoutCount: this.countExerciseOccurrences(workouts, row.exercise),\n              lastUsed: workout.date\n            });\n          }\n        }\n        if (row.muscleGroup) {\n          allMuscleGroups.add(row.muscleGroup.toLowerCase());\n          if (this.fuzzyMatch(row.muscleGroup.toLowerCase(), term)) {\n            results.muscleGroups.push({\n              name: row.muscleGroup,\n              exerciseCount: this.countMuscleGroupExercises(workouts, row.muscleGroup),\n              workoutCount: this.countMuscleGroupWorkouts(workouts, row.muscleGroup)\n            });\n          }\n        }\n      });\n    });\n\n    // Remove duplicates and sort by relevance\n    results.exercises = this.removeDuplicates(results.exercises, 'name').sort((a, b) => b.workoutCount - a.workoutCount);\n    results.muscleGroups = this.removeDuplicates(results.muscleGroups, 'name').sort((a, b) => b.workoutCount - a.workoutCount);\n    results.workouts.sort((a, b) => b.relevanceScore - a.relevanceScore);\n\n    // Generate search suggestions\n    results.suggestions = this.generateSuggestions(term, allExercises, allMuscleGroups);\n    return results;\n  }\n\n  /**\r\n   * Search within a single workout\r\n   */\n  static searchInWorkout(workout, term, filters = {}) {\n    var _workout$tableName, _workout$rows2;\n    let matches = false;\n    let matchType = '';\n    let matchedExercises = [];\n    let relevanceScore = 0;\n\n    // Check workout name\n    if (this.fuzzyMatch(((_workout$tableName = workout.tableName) === null || _workout$tableName === void 0 ? void 0 : _workout$tableName.toLowerCase()) || '', term)) {\n      matches = true;\n      matchType = 'workout_name';\n      relevanceScore += 10;\n    }\n\n    // Check date\n    if (workout.date && workout.date.includes(term)) {\n      matches = true;\n      matchType = matchType ? 'multiple' : 'date';\n      relevanceScore += 5;\n    }\n\n    // Check exercises and notes\n    (_workout$rows2 = workout.rows) === null || _workout$rows2 === void 0 ? void 0 : _workout$rows2.forEach(row => {\n      if (row.exercise && this.fuzzyMatch(row.exercise.toLowerCase(), term)) {\n        matches = true;\n        matchType = matchType ? 'multiple' : 'exercise';\n        matchedExercises.push(row.exercise);\n        relevanceScore += 8;\n      }\n      if (row.muscleGroup && this.fuzzyMatch(row.muscleGroup.toLowerCase(), term)) {\n        matches = true;\n        matchType = matchType ? 'multiple' : 'muscle_group';\n        relevanceScore += 6;\n      }\n      if (row.notes && this.fuzzyMatch(row.notes.toLowerCase(), term)) {\n        matches = true;\n        matchType = matchType ? 'multiple' : 'notes';\n        relevanceScore += 3;\n      }\n\n      // Check set data (weight/reps)\n      if (row.sets) {\n        row.sets.forEach(set => {\n          if (set.weight && set.weight.toString().includes(term)) {\n            matches = true;\n            matchType = matchType ? 'multiple' : 'weight';\n            relevanceScore += 2;\n          }\n          if (set.reps && set.reps.toString().includes(term)) {\n            matches = true;\n            matchType = matchType ? 'multiple' : 'reps';\n            relevanceScore += 2;\n          }\n        });\n      }\n    });\n\n    // Apply filters\n    if (matches && filters.dateRange) {\n      const workoutDate = new Date(workout.date);\n      const {\n        start,\n        end\n      } = filters.dateRange;\n      if (workoutDate < start || workoutDate > end) {\n        matches = false;\n      }\n    }\n    if (matches && filters.muscleGroup) {\n      var _workout$rows3;\n      const hasTargetMuscleGroup = (_workout$rows3 = workout.rows) === null || _workout$rows3 === void 0 ? void 0 : _workout$rows3.some(row => {\n        var _row$muscleGroup;\n        return ((_row$muscleGroup = row.muscleGroup) === null || _row$muscleGroup === void 0 ? void 0 : _row$muscleGroup.toLowerCase()) === filters.muscleGroup.toLowerCase();\n      });\n      if (!hasTargetMuscleGroup) {\n        matches = false;\n      }\n    }\n    return {\n      matches,\n      matchType,\n      matchedExercises: [...new Set(matchedExercises)],\n      relevanceScore\n    };\n  }\n\n  /**\r\n   * Fuzzy string matching with tolerance for typos\r\n   */\n  static fuzzyMatch(text, term) {\n    // Exact match\n    if (text.includes(term)) return true;\n\n    // Split into words for partial matching\n    const textWords = text.split(/\\s+/);\n    const termWords = term.split(/\\s+/);\n\n    // Check if any term word matches any text word\n    return termWords.some(termWord => textWords.some(textWord => {\n      // Partial word match\n      if (textWord.includes(termWord) || termWord.includes(textWord)) return true;\n\n      // Edit distance for typo tolerance\n      return this.levenshteinDistance(textWord, termWord) <= Math.max(1, Math.floor(termWord.length * 0.3));\n    }));\n  }\n\n  /**\r\n   * Calculate Levenshtein distance for fuzzy matching\r\n   */\n  static levenshteinDistance(str1, str2) {\n    const matrix = Array(str2.length + 1).fill().map(() => Array(str1.length + 1).fill(0));\n    for (let i = 0; i <= str1.length; i++) matrix[0][i] = i;\n    for (let j = 0; j <= str2.length; j++) matrix[j][0] = j;\n    for (let j = 1; j <= str2.length; j++) {\n      for (let i = 1; i <= str1.length; i++) {\n        const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;\n        matrix[j][i] = Math.min(matrix[j][i - 1] + 1,\n        // deletion\n        matrix[j - 1][i] + 1,\n        // insertion\n        matrix[j - 1][i - 1] + cost // substitution\n        );\n      }\n    }\n    return matrix[str2.length][str1.length];\n  }\n\n  /**\r\n   * Remove duplicates from array based on key\r\n   */\n  static removeDuplicates(array, key) {\n    const seen = new Set();\n    return array.filter(item => {\n      const value = item[key];\n      if (seen.has(value)) return false;\n      seen.add(value);\n      return true;\n    });\n  }\n\n  /**\r\n   * Count exercise occurrences across all workouts\r\n   */\n  static countExerciseOccurrences(workouts, exerciseName) {\n    return workouts.reduce((count, workout) => {\n      var _workout$rows4;\n      return count + (((_workout$rows4 = workout.rows) === null || _workout$rows4 === void 0 ? void 0 : _workout$rows4.filter(row => {\n        var _row$exercise;\n        return ((_row$exercise = row.exercise) === null || _row$exercise === void 0 ? void 0 : _row$exercise.toLowerCase()) === exerciseName.toLowerCase();\n      }).length) || 0);\n    }, 0);\n  }\n\n  /**\r\n   * Count exercises in a muscle group\r\n   */\n  static countMuscleGroupExercises(workouts, muscleGroup) {\n    const exercises = new Set();\n    workouts.forEach(workout => {\n      var _workout$rows5;\n      (_workout$rows5 = workout.rows) === null || _workout$rows5 === void 0 ? void 0 : _workout$rows5.forEach(row => {\n        var _row$muscleGroup2;\n        if (((_row$muscleGroup2 = row.muscleGroup) === null || _row$muscleGroup2 === void 0 ? void 0 : _row$muscleGroup2.toLowerCase()) === muscleGroup.toLowerCase() && row.exercise) {\n          exercises.add(row.exercise.toLowerCase());\n        }\n      });\n    });\n    return exercises.size;\n  }\n\n  /**\r\n   * Count workouts containing a muscle group\r\n   */\n  static countMuscleGroupWorkouts(workouts, muscleGroup) {\n    return workouts.filter(workout => {\n      var _workout$rows6;\n      return (_workout$rows6 = workout.rows) === null || _workout$rows6 === void 0 ? void 0 : _workout$rows6.some(row => {\n        var _row$muscleGroup3;\n        return ((_row$muscleGroup3 = row.muscleGroup) === null || _row$muscleGroup3 === void 0 ? void 0 : _row$muscleGroup3.toLowerCase()) === muscleGroup.toLowerCase();\n      });\n    }).length;\n  }\n\n  /**\r\n   * Generate search suggestions based on available data\r\n   */\n  static generateSuggestions(term, exercises, muscleGroups) {\n    const suggestions = [];\n\n    // Find similar exercises\n    const similarExercises = Array.from(exercises).filter(exercise => this.fuzzyMatch(exercise, term) && exercise !== term).slice(0, 3);\n\n    // Find similar muscle groups\n    const similarMuscleGroups = Array.from(muscleGroups).filter(group => this.fuzzyMatch(group, term) && group !== term).slice(0, 2);\n    suggestions.push(...similarExercises.map(ex => ({\n      type: 'exercise',\n      value: ex\n    })));\n    suggestions.push(...similarMuscleGroups.map(mg => ({\n      type: 'muscle_group',\n      value: mg\n    })));\n    return suggestions;\n  }\n\n  /**\r\n   * Get search filters for date ranges\r\n   */\n  static getDateRangeFilter(range) {\n    const now = new Date();\n    const filters = {};\n    switch (range) {\n      case 'week':\n        filters.start = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7);\n        filters.end = now;\n        break;\n      case 'month':\n        filters.start = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());\n        filters.end = now;\n        break;\n      case '3months':\n        filters.start = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());\n        filters.end = now;\n        break;\n      case '6months':\n        filters.start = new Date(now.getFullYear(), now.getMonth() - 6, now.getDate());\n        filters.end = now;\n        break;\n      case 'year':\n        filters.start = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());\n        filters.end = now;\n        break;\n      default:\n        return null;\n    }\n    return {\n      dateRange: filters\n    };\n  }\n\n  /**\r\n   * Format search results for display\r\n   */\n  static formatResults(results, term) {\n    return {\n      ...results,\n      summary: {\n        total: results.workouts.length + results.exercises.length + results.muscleGroups.length,\n        workouts: results.workouts.length,\n        exercises: results.exercises.length,\n        muscleGroups: results.muscleGroups.length,\n        searchTerm: term\n      }\n    };\n  }\n}","map":{"version":3,"names":["SearchService","searchWorkouts","workouts","searchTerm","filters","trim","exercises","muscleGroups","suggestions","term","toLowerCase","results","forEach","workout","workoutMatch","searchInWorkout","matches","push","matchType","matchedExercises","relevanceScore","allExercises","Set","allMuscleGroups","_workout$rows","rows","row","exercise","add","fuzzyMatch","name","muscleGroup","workoutCount","countExerciseOccurrences","lastUsed","date","exerciseCount","countMuscleGroupExercises","countMuscleGroupWorkouts","removeDuplicates","sort","a","b","generateSuggestions","_workout$tableName","_workout$rows2","tableName","includes","notes","sets","set","weight","toString","reps","dateRange","workoutDate","Date","start","end","_workout$rows3","hasTargetMuscleGroup","some","_row$muscleGroup","text","textWords","split","termWords","termWord","textWord","levenshteinDistance","Math","max","floor","length","str1","str2","matrix","Array","fill","map","i","j","cost","min","array","key","seen","filter","item","value","has","exerciseName","reduce","count","_workout$rows4","_row$exercise","_workout$rows5","_row$muscleGroup2","size","_workout$rows6","_row$muscleGroup3","similarExercises","from","slice","similarMuscleGroups","group","ex","type","mg","getDateRangeFilter","range","now","getFullYear","getMonth","getDate","formatResults","summary","total"],"sources":["C:/Users/kidus/OneDrive/Documentos/Summer2025/fitness-tracker-frontend/Frontend/src/services/searchService.js"],"sourcesContent":["// Search Service\r\n// Provides comprehensive search functionality across workouts and exercises\r\n\r\nexport class SearchService {\r\n    /**\r\n     * Search across all workouts and exercises\r\n     * @param {Array} workouts - Array of workout objects\r\n     * @param {string} searchTerm - Search term to look for\r\n     * @param {Object} filters - Search filters\r\n     * @returns {Object} Search results organized by type\r\n     */\r\n    static searchWorkouts(workouts, searchTerm, filters = {}) {\r\n        if (!searchTerm.trim()) {\r\n            return {\r\n                workouts: [],\r\n                exercises: [],\r\n                muscleGroups: [],\r\n                suggestions: []\r\n            };\r\n        }\r\n\r\n        const term = searchTerm.toLowerCase().trim();\r\n        const results = {\r\n            workouts: [],\r\n            exercises: [],\r\n            muscleGroups: [],\r\n            suggestions: []\r\n        };\r\n\r\n        // Search through workouts\r\n        workouts.forEach(workout => {\r\n            const workoutMatch = this.searchInWorkout(workout, term, filters);\r\n            if (workoutMatch.matches) {\r\n                results.workouts.push({\r\n                    ...workout,\r\n                    matchType: workoutMatch.matchType,\r\n                    matchedExercises: workoutMatch.matchedExercises,\r\n                    relevanceScore: workoutMatch.relevanceScore\r\n                });\r\n            }\r\n        });\r\n\r\n        // Extract unique exercises and muscle groups\r\n        const allExercises = new Set();\r\n        const allMuscleGroups = new Set();\r\n\r\n        workouts.forEach(workout => {\r\n            workout.rows?.forEach(row => {\r\n                if (row.exercise) {\r\n                    allExercises.add(row.exercise.toLowerCase());\r\n                    if (this.fuzzyMatch(row.exercise.toLowerCase(), term)) {\r\n                        results.exercises.push({\r\n                            name: row.exercise,\r\n                            muscleGroup: row.muscleGroup,\r\n                            workoutCount: this.countExerciseOccurrences(workouts, row.exercise),\r\n                            lastUsed: workout.date\r\n                        });\r\n                    }\r\n                }\r\n                if (row.muscleGroup) {\r\n                    allMuscleGroups.add(row.muscleGroup.toLowerCase());\r\n                    if (this.fuzzyMatch(row.muscleGroup.toLowerCase(), term)) {\r\n                        results.muscleGroups.push({\r\n                            name: row.muscleGroup,\r\n                            exerciseCount: this.countMuscleGroupExercises(workouts, row.muscleGroup),\r\n                            workoutCount: this.countMuscleGroupWorkouts(workouts, row.muscleGroup)\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        // Remove duplicates and sort by relevance\r\n        results.exercises = this.removeDuplicates(results.exercises, 'name')\r\n            .sort((a, b) => b.workoutCount - a.workoutCount);\r\n\r\n        results.muscleGroups = this.removeDuplicates(results.muscleGroups, 'name')\r\n            .sort((a, b) => b.workoutCount - a.workoutCount);\r\n\r\n        results.workouts.sort((a, b) => b.relevanceScore - a.relevanceScore);\r\n\r\n        // Generate search suggestions\r\n        results.suggestions = this.generateSuggestions(term, allExercises, allMuscleGroups);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Search within a single workout\r\n     */\r\n    static searchInWorkout(workout, term, filters = {}) {\r\n        let matches = false;\r\n        let matchType = '';\r\n        let matchedExercises = [];\r\n        let relevanceScore = 0;\r\n\r\n        // Check workout name\r\n        if (this.fuzzyMatch(workout.tableName?.toLowerCase() || '', term)) {\r\n            matches = true;\r\n            matchType = 'workout_name';\r\n            relevanceScore += 10;\r\n        }\r\n\r\n        // Check date\r\n        if (workout.date && workout.date.includes(term)) {\r\n            matches = true;\r\n            matchType = matchType ? 'multiple' : 'date';\r\n            relevanceScore += 5;\r\n        }\r\n\r\n        // Check exercises and notes\r\n        workout.rows?.forEach(row => {\r\n            if (row.exercise && this.fuzzyMatch(row.exercise.toLowerCase(), term)) {\r\n                matches = true;\r\n                matchType = matchType ? 'multiple' : 'exercise';\r\n                matchedExercises.push(row.exercise);\r\n                relevanceScore += 8;\r\n            }\r\n\r\n            if (row.muscleGroup && this.fuzzyMatch(row.muscleGroup.toLowerCase(), term)) {\r\n                matches = true;\r\n                matchType = matchType ? 'multiple' : 'muscle_group';\r\n                relevanceScore += 6;\r\n            }\r\n\r\n            if (row.notes && this.fuzzyMatch(row.notes.toLowerCase(), term)) {\r\n                matches = true;\r\n                matchType = matchType ? 'multiple' : 'notes';\r\n                relevanceScore += 3;\r\n            }\r\n\r\n            // Check set data (weight/reps)\r\n            if (row.sets) {\r\n                row.sets.forEach(set => {\r\n                    if (set.weight && set.weight.toString().includes(term)) {\r\n                        matches = true;\r\n                        matchType = matchType ? 'multiple' : 'weight';\r\n                        relevanceScore += 2;\r\n                    }\r\n                    if (set.reps && set.reps.toString().includes(term)) {\r\n                        matches = true;\r\n                        matchType = matchType ? 'multiple' : 'reps';\r\n                        relevanceScore += 2;\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // Apply filters\r\n        if (matches && filters.dateRange) {\r\n            const workoutDate = new Date(workout.date);\r\n            const { start, end } = filters.dateRange;\r\n            if (workoutDate < start || workoutDate > end) {\r\n                matches = false;\r\n            }\r\n        }\r\n\r\n        if (matches && filters.muscleGroup) {\r\n            const hasTargetMuscleGroup = workout.rows?.some(row => \r\n                row.muscleGroup?.toLowerCase() === filters.muscleGroup.toLowerCase()\r\n            );\r\n            if (!hasTargetMuscleGroup) {\r\n                matches = false;\r\n            }\r\n        }\r\n\r\n        return {\r\n            matches,\r\n            matchType,\r\n            matchedExercises: [...new Set(matchedExercises)],\r\n            relevanceScore\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Fuzzy string matching with tolerance for typos\r\n     */\r\n    static fuzzyMatch(text, term) {\r\n        // Exact match\r\n        if (text.includes(term)) return true;\r\n\r\n        // Split into words for partial matching\r\n        const textWords = text.split(/\\s+/);\r\n        const termWords = term.split(/\\s+/);\r\n\r\n        // Check if any term word matches any text word\r\n        return termWords.some(termWord => \r\n            textWords.some(textWord => {\r\n                // Partial word match\r\n                if (textWord.includes(termWord) || termWord.includes(textWord)) return true;\r\n                \r\n                // Edit distance for typo tolerance\r\n                return this.levenshteinDistance(textWord, termWord) <= Math.max(1, Math.floor(termWord.length * 0.3));\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Calculate Levenshtein distance for fuzzy matching\r\n     */\r\n    static levenshteinDistance(str1, str2) {\r\n        const matrix = Array(str2.length + 1).fill().map(() => Array(str1.length + 1).fill(0));\r\n\r\n        for (let i = 0; i <= str1.length; i++) matrix[0][i] = i;\r\n        for (let j = 0; j <= str2.length; j++) matrix[j][0] = j;\r\n\r\n        for (let j = 1; j <= str2.length; j++) {\r\n            for (let i = 1; i <= str1.length; i++) {\r\n                const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;\r\n                matrix[j][i] = Math.min(\r\n                    matrix[j][i - 1] + 1,     // deletion\r\n                    matrix[j - 1][i] + 1,     // insertion\r\n                    matrix[j - 1][i - 1] + cost // substitution\r\n                );\r\n            }\r\n        }\r\n\r\n        return matrix[str2.length][str1.length];\r\n    }\r\n\r\n    /**\r\n     * Remove duplicates from array based on key\r\n     */\r\n    static removeDuplicates(array, key) {\r\n        const seen = new Set();\r\n        return array.filter(item => {\r\n            const value = item[key];\r\n            if (seen.has(value)) return false;\r\n            seen.add(value);\r\n            return true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Count exercise occurrences across all workouts\r\n     */\r\n    static countExerciseOccurrences(workouts, exerciseName) {\r\n        return workouts.reduce((count, workout) => {\r\n            return count + (workout.rows?.filter(row => \r\n                row.exercise?.toLowerCase() === exerciseName.toLowerCase()\r\n            ).length || 0);\r\n        }, 0);\r\n    }\r\n\r\n    /**\r\n     * Count exercises in a muscle group\r\n     */\r\n    static countMuscleGroupExercises(workouts, muscleGroup) {\r\n        const exercises = new Set();\r\n        workouts.forEach(workout => {\r\n            workout.rows?.forEach(row => {\r\n                if (row.muscleGroup?.toLowerCase() === muscleGroup.toLowerCase() && row.exercise) {\r\n                    exercises.add(row.exercise.toLowerCase());\r\n                }\r\n            });\r\n        });\r\n        return exercises.size;\r\n    }\r\n\r\n    /**\r\n     * Count workouts containing a muscle group\r\n     */\r\n    static countMuscleGroupWorkouts(workouts, muscleGroup) {\r\n        return workouts.filter(workout => \r\n            workout.rows?.some(row => \r\n                row.muscleGroup?.toLowerCase() === muscleGroup.toLowerCase()\r\n            )\r\n        ).length;\r\n    }\r\n\r\n    /**\r\n     * Generate search suggestions based on available data\r\n     */\r\n    static generateSuggestions(term, exercises, muscleGroups) {\r\n        const suggestions = [];\r\n        \r\n        // Find similar exercises\r\n        const similarExercises = Array.from(exercises).filter(exercise => \r\n            this.fuzzyMatch(exercise, term) && exercise !== term\r\n        ).slice(0, 3);\r\n\r\n        // Find similar muscle groups\r\n        const similarMuscleGroups = Array.from(muscleGroups).filter(group => \r\n            this.fuzzyMatch(group, term) && group !== term\r\n        ).slice(0, 2);\r\n\r\n        suggestions.push(...similarExercises.map(ex => ({ type: 'exercise', value: ex })));\r\n        suggestions.push(...similarMuscleGroups.map(mg => ({ type: 'muscle_group', value: mg })));\r\n\r\n        return suggestions;\r\n    }\r\n\r\n    /**\r\n     * Get search filters for date ranges\r\n     */\r\n    static getDateRangeFilter(range) {\r\n        const now = new Date();\r\n        const filters = {};\r\n\r\n        switch (range) {\r\n            case 'week':\r\n                filters.start = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7);\r\n                filters.end = now;\r\n                break;\r\n            case 'month':\r\n                filters.start = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());\r\n                filters.end = now;\r\n                break;\r\n            case '3months':\r\n                filters.start = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());\r\n                filters.end = now;\r\n                break;\r\n            case '6months':\r\n                filters.start = new Date(now.getFullYear(), now.getMonth() - 6, now.getDate());\r\n                filters.end = now;\r\n                break;\r\n            case 'year':\r\n                filters.start = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());\r\n                filters.end = now;\r\n                break;\r\n            default:\r\n                return null;\r\n        }\r\n\r\n        return { dateRange: filters };\r\n    }\r\n\r\n    /**\r\n     * Format search results for display\r\n     */\r\n    static formatResults(results, term) {\r\n        return {\r\n            ...results,\r\n            summary: {\r\n                total: results.workouts.length + results.exercises.length + results.muscleGroups.length,\r\n                workouts: results.workouts.length,\r\n                exercises: results.exercises.length,\r\n                muscleGroups: results.muscleGroups.length,\r\n                searchTerm: term\r\n            }\r\n        };\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}