{"ast":null,"code":"import{getTables,getTable,createTable,updateTable,deleteTable}from'../services/api';export default class TrainingLogManager{// List all tables\nasync listTables(){return await getTables();}// Load a single table by ID\nasync loadTable(id){return await getTable(id);}// Create a new table in the backend\nasync createTable(log){return await createTable(log);}// Save (update) a table\nasync saveTable(log){if(!log.id){// Create new\nreturn await createTable(log);}else{// Update existing\nreturn await updateTable(log.id,log);}}// Delete a table by ID\nasync deleteTable(id){return await deleteTable(id);}// Get all unique muscle groups from all logs\nasync getUniqueMuscleGroups(){const tables=await getTables();const muscleGroups=new Set();tables.forEach(data=>{if(data.rows){data.rows.forEach(row=>{if(row.muscleGroup&&row.muscleGroup.trim()){muscleGroups.add(row.muscleGroup.trim());}});}});return Array.from(muscleGroups).sort();}// Get all unique exercises from all logs\nasync getUniqueExercises(){const tables=await getTables();const exercises=new Set();tables.forEach(data=>{if(data.rows){data.rows.forEach(row=>{if(row.exercise&&row.exercise.trim()){exercises.add(row.exercise.trim());}});}});return Array.from(exercises).sort();}// Get exercises for a specific muscle group\nasync getExercisesForMuscleGroup(muscleGroup){const tables=await getTables();const exercises=new Set();tables.forEach(data=>{if(data.rows){data.rows.forEach(row=>{if(row.muscleGroup===muscleGroup&&row.exercise&&row.exercise.trim()){exercises.add(row.exercise.trim());}});}});return Array.from(exercises).sort();}// Create a new table object (not saved yet)\ncreateNewTable(){const id=crypto.randomUUID();const today=new Date().toISOString().split('T')[0];return{id,tableName:'New Log',date:today,rows:[{id:0,muscleGroup:'',exercise:'',sets:[{reps:'',weight:''}],notes:'',showNotes:false,weightUnit:'lbs'}]};}}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}