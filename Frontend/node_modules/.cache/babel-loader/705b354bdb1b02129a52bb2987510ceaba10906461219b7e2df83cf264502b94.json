{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000/api';\n\n// Helper function to get auth headers\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    'Content-Type': 'application/json',\n    ...(token && {\n      'Authorization': `Bearer ${token}`\n    })\n  };\n};\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    if (response.status === 401) {\n      // Token expired or invalid, redirect to login\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n      throw new Error('Authentication required');\n    }\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n  }\n  return response.json();\n};\n\n// Authentication API calls\nexport const authAPI = {\n  login: async (email, password) => {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    return handleResponse(response);\n  },\n  register: async (email, password) => {\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    return handleResponse(response);\n  },\n  getCurrentUser: async () => {\n    const response = await fetch(`${API_BASE_URL}/auth/me`, {\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  }\n};\n\n// Training logs API calls\nexport const trainingLogsAPI = {\n  getAll: async () => {\n    const response = await fetch(`${API_BASE_URL}/training-logs`, {\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  getById: async id => {\n    const response = await fetch(`${API_BASE_URL}/training-logs/${id}`, {\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  create: async logData => {\n    const response = await fetch(`${API_BASE_URL}/training-logs`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(logData)\n    });\n    return handleResponse(response);\n  },\n  update: async (id, logData) => {\n    const response = await fetch(`${API_BASE_URL}/training-logs/${id}`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(logData)\n    });\n    return handleResponse(response);\n  },\n  delete: async id => {\n    const response = await fetch(`${API_BASE_URL}/training-logs/${id}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  }\n};\n\n// Legacy API functions for backward compatibility\nexport const fetchTables = () => trainingLogsAPI.getAll();\nexport const fetchTableById = id => trainingLogsAPI.getById(id);\nexport const deleteTable = id => trainingLogsAPI.delete(id);\n\n// Save table function for backward compatibility\nexport const saveTable = async tableData => {\n  return trainingLogsAPI.create({\n    name: tableData.name || 'Untitled Training Log',\n    date: tableData.date || new Date().toISOString().split('T')[0],\n    data: tableData\n  });\n};\nconst apiService = {\n  auth: authAPI,\n  trainingLogs: trainingLogsAPI,\n  // Legacy exports\n  fetchTables,\n  fetchTableById,\n  deleteTable,\n  saveTable\n};\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","getAuthHeaders","token","localStorage","getItem","handleResponse","response","ok","status","removeItem","window","location","href","Error","errorData","json","catch","detail","authAPI","login","email","password","fetch","method","headers","body","JSON","stringify","register","getCurrentUser","trainingLogsAPI","getAll","getById","id","create","logData","update","delete","fetchTables","fetchTableById","deleteTable","saveTable","tableData","name","date","Date","toISOString","split","data","apiService","auth","trainingLogs"],"sources":["C:/Users/kidus/OneDrive/Documentos/Summer2025/fitness-tracker-frontend/Frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000/api';\r\n\r\n// Helper function to get auth headers\r\nconst getAuthHeaders = () => {\r\n  const token = localStorage.getItem('token');\r\n  return {\r\n    'Content-Type': 'application/json',\r\n    ...(token && { 'Authorization': `Bearer ${token}` }),\r\n  };\r\n};\r\n\r\n// Helper function to handle API responses\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    if (response.status === 401) {\r\n      // Token expired or invalid, redirect to login\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n      throw new Error('Authentication required');\r\n    }\r\n    \r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\n// Authentication API calls\r\nexport const authAPI = {\r\n  login: async (email, password) => {\r\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  register: async (email, password) => {\r\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  getCurrentUser: async () => {\r\n    const response = await fetch(`${API_BASE_URL}/auth/me`, {\r\n      headers: getAuthHeaders(),\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n};\r\n\r\n// Training logs API calls\r\nexport const trainingLogsAPI = {\r\n  getAll: async () => {\r\n    const response = await fetch(`${API_BASE_URL}/training-logs`, {\r\n      headers: getAuthHeaders(),\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  getById: async (id) => {\r\n    const response = await fetch(`${API_BASE_URL}/training-logs/${id}`, {\r\n      headers: getAuthHeaders(),\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  create: async (logData) => {\r\n    const response = await fetch(`${API_BASE_URL}/training-logs`, {\r\n      method: 'POST',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify(logData),\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  update: async (id, logData) => {\r\n    const response = await fetch(`${API_BASE_URL}/training-logs/${id}`, {\r\n      method: 'PUT',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify(logData),\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  delete: async (id) => {\r\n    const response = await fetch(`${API_BASE_URL}/training-logs/${id}`, {\r\n      method: 'DELETE',\r\n      headers: getAuthHeaders(),\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n};\r\n\r\n// Legacy API functions for backward compatibility\r\nexport const fetchTables = () => trainingLogsAPI.getAll();\r\nexport const fetchTableById = (id) => trainingLogsAPI.getById(id);\r\nexport const deleteTable = (id) => trainingLogsAPI.delete(id);\r\n\r\n// Save table function for backward compatibility\r\nexport const saveTable = async (tableData) => {\r\n  return trainingLogsAPI.create({\r\n    name: tableData.name || 'Untitled Training Log',\r\n    date: tableData.date || new Date().toISOString().split('T')[0],\r\n    data: tableData,\r\n  });\r\n};\r\n\r\nconst apiService = {\r\n  auth: authAPI,\r\n  trainingLogs: trainingLogsAPI,\r\n  // Legacy exports\r\n  fetchTables,\r\n  fetchTableById,\r\n  deleteTable,\r\n  saveTable,\r\n};\r\n\r\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}